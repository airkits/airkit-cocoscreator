window.airkit = {},
    function (t) {
        class e {
            constructor() {
                let i = this.constructor;
                if (i) {
                    if (-1 != e.classKeys.indexOf(i)) throw new Error(this + " 只允许实例化一次！");
                    e.classKeys.push(i), e.classValues.push(this)
                } else t.Log.warning("浏览器不支持读取构造函数")
            }
        }
        e.classKeys = [], e.classValues = [], t.Singleton = e
    }(airkit || (airkit = {})),
    function (t) {
        class e extends t.Singleton {
            constructor() {
                super(), this._isStopGame = !1, this._mainloopHandle = null, t.Timer.Start()
            }
            static get Instance() {
                return this.instance || (this.instance = new e), this.instance
            }
            setup(e, i, s = t.LogLevel.INFO, r = 750, a = 1334, n = Laya.Stage.SCREEN_VERTICAL, l = 1) {
                this.printDeviceInfo(), this._lastTimeMS = t.DateUtils.getNowMS(), this._isStopGame = !1, this._mainloopHandle = i, t.Log.LEVEL = s, Laya.timer.frameLoop(l, this, this.mainLoop), Laya.stage.addChild(fgui.GRoot.inst.displayObject), t.LayerManager.setup(e), t.TimerManager.Instance.setup(), t.UIManager.Instance.setup(), t.ResourceManager.Instance.setup(), t.DataProvider.Instance.setup(), t.LangManager.Instance.init(), t.SceneManager.Instance.setup(), t.Mediator.Instance.setup(), t.LoaderManager.Instance.setup()
            }
            destroy() {
                Laya.timer.clearAll(this), t.Mediator.Instance.destroy(), t.LoaderManager.Instance.destroy(), t.TimerManager.Instance.destroy(), t.UIManager.Instance.destroy(), t.SceneManager.Instance.destroy(), t.ResourceManager.Instance.destroy(), t.DataProvider.Instance.destroy(), t.LayerManager.destroy(), t.LangManager.Instance.destory()
            }
            mainLoop() {
                if (!this._isStopGame) {
                    let e = t.DateUtils.getNowMS(),
                        i = e - this._lastTimeMS;
                    this._lastTimeMS = e, this.preTick(i), this.tick(i), this.endTick(i)
                }
            }
            preTick(e) {
                t.TimerManager.Instance.update(e), t.UIManager.Instance.update(e), t.ResourceManager.Instance.update(e), t.Mediator.Instance.update(e), t.SceneManager.Instance.update(e)
            }
            tick(t) {
                this._mainloopHandle && this._mainloopHandle.runWith([t])
            }
            endTick(t) {}
            pauseGame() {
                this._isStopGame = !0, t.EventCenter.dispatchEvent(t.EventID.STOP_GAME, !0)
            }
            resumeGame() {
                this._isStopGame = !1, t.EventCenter.dispatchEvent(t.EventID.STOP_GAME, !1)
            }
            get isStopGame() {
                return this._isStopGame
            }
            printDeviceInfo() {
                if (navigator) {
                    let e = navigator.userAgent,
                        i = e.indexOf("("),
                        s = e.indexOf(")");
                    if (i < 0 || s < 0 || s < i) return;
                    let r, a, n, l = e.substring(i + 1, s);
                    t.Log.info(l);
                    let o = l.split(";");
                    if (3 == o.length) {
                        r = o[2];
                        let t = o[1].split(" ");
                        t.length >= 2 && (a = t[1], n = t[2])
                    } else 2 == o.length ? (a = o[0], r = o[0], n = o[1]) : (a = navigator.platform, r = navigator.platform, n = l);
                    t.Log.info("{0},{1},{2}", a, r, n)
                }
            }
        }
        e.instance = null, t.Framework = e
    }(airkit || (airkit = {})),
    function (t) {
        class e extends t.Singleton {
            constructor() {
                super(), this.effectChannelDic = new t.SDictionary, this.effectChannelNumDic = new t.SDictionary, this._effectSwitch = !0, this._musicSwitch = !0, Laya.SoundManager.useAudioMusic = !1, Laya.SoundManager.autoReleaseSound = !1
            }
            static get Instance() {
                return this.instance || (this.instance = new e), this.instance
            }
            registerMusic(e) {
                null == this.musicsConfig && (this.musicsConfig = new t.NDictionary), this.musicsConfig.add(e.id, e)
            }
            registerEffect(e) {
                null == this.effectConfig && (this.effectConfig = new t.NDictionary), this.setEffectVolume(.3, e.url), this.effectConfig.add(e.id, e)
            }
            set musicSwitch(t) {
                this._musicSwitch != t && (t || this.stopMusic(), this._musicSwitch = t)
            }
            set effectSwitch(t) {
                this._effectSwitch != t && (t || this.stopAllEffect(), this._effectSwitch = t)
            }
            playMusic(t, e = 0, i = null, s = 0) {
                this._musicSwitch && (Laya.SoundManager.playMusic(t, e, i, s), Laya.SoundManager.setMusicVolume(.5))
            }
            playEffect(e, i = 1, s = null, r = null, a = 0) {
                if (!this._effectSwitch) return;
                let n = this.effectChannelNumDic.getValue(e);
                if (null == n ? this.effectChannelNumDic.add(e, 1) : this.effectChannelNumDic.set(e, n + 1), this.effectChannelDic.getValue(e)) return;
                n = this.effectChannelNumDic.getValue(e), this.effectChannelNumDic.remove(e);
                let l = t.Timer.timeScale;
                l > 1.5 && (l = 1.5), Laya.SoundManager.playbackRate = l, this.effectChannelDic.add(e, Laya.SoundManager.playSound(e, n, Laya.Handler.create(null, () => {
                    this.effectChannelDic.remove(e)
                }), r, a)), Laya.SoundManager.setSoundVolume(.5, e)
            }
            setMusicVolume(t) {
                Laya.SoundManager.setMusicVolume(t)
            }
            setEffectVolume(t, e = null) {
                Laya.SoundManager.setSoundVolume(t, e)
            }
            stopAll() {
                Laya.SoundManager.stopAll()
            }
            stopAllEffect() {
                this.effectChannelDic.foreach((t, e) => (null != e && e.stop(), this.removeChannel(t, e), !0)), this.effectChannelNumDic.clear()
            }
            stopMusic() {
                Laya.SoundManager.stopMusic()
            }
            removeChannel(t, e) {
                this.effectChannelDic.remove(t), Laya.SoundManager.removeChannel(e)
            }
            playMusicByID(t, e = 0, i = null, s = 0) {
                var r = this.musicsConfig.getValue(t);
                this.playMusic(r.url, e, i, s)
            }
            playEffectByID(t, e = 1, i = null, s = 0) {
                var r = this.effectConfig.getValue(t);
                this.playEffect(r.url, e, i, s)
            }
        }
        e.instance = null, t.AudioManager = e
    }(airkit || (airkit = {})),
    function (t) {
        class e {
            constructor(t, e, i, s) {
                this.r = t, this.g = e, this.b = i, this.a = s
            }
            set(t, e, i, s) {
                this.r = t, this.g = e, this.b = i, this.a = s
            }
            static add(t, i) {
                return new e(t.r + i.r, t.g + i.g, t.b + i.b, t.a + i.a)
            }
            add(t) {
                return this.set(this.r + t.r, this.g + t.g, this.b + t.b, this.a + t.a), this
            }
            static sub(t, i) {
                return new e(t.r - i.r, t.g - i.g, t.b - i.b, t.a - i.a)
            }
            sub(t) {
                return this.set(this.r - t.r, this.g - t.g, this.b - t.b, this.a - t.a), this
            }
            static mul(t, i) {
                return new e(t.r * i, t.g * i, t.b * i, t.a * i)
            }
            mul(t) {
                return this.set(this.r * t, this.g * t, this.b * t, this.a * t), this
            }
            static div(t, i) {
                return new e(t.r / i, t.g / i, t.b / i, t.a / i)
            }
            div(t) {
                return this.set(this.r / t, this.g / t, this.b / t, this.a / t), this
            }
            equals(t) {
                return this.r == t.r && this.g == t.g && this.b == t.b && this.a == t.a
            }
            static lerp(i, s, r) {
                return r = t.MathUtils.clamp(r, 0, 1), new e(i.r + (s.r - i.r) * r, i.g + (s.g - i.g) * r, i.b + (s.b - i.b) * r + (s.a - i.a) * r)
            }
            static get zero() {
                return new e(0, 0, 0, 0)
            }
            static get one() {
                return new e(1, 1, 1, 1)
            }
            static get red() {
                return new e(1, 0, 0, 1)
            }
            static get green() {
                return new e(0, 1, 0, 1)
            }
            static get blue() {
                return new e(0, 0, 1, 1)
            }
            static get white() {
                return new e(1, 1, 1, 1)
            }
            static get black() {
                return new e(0, 0, 0, 1)
            }
            static get yellow() {
                return new e(1, .9215686, .01568628, 1)
            }
            static get cyan() {
                return new e(0, 1, 1, 1)
            }
            static get magenta() {
                return new e(1, 0, 1, 1)
            }
            static get gray() {
                return new e(.5, .5, .5, 1)
            }
            static get grey() {
                return new e(.5, .5, .5, 1)
            }
            static get clear() {
                return new e(0, 0, 0, 0)
            }
            toString() {
                return t.StringUtils.format("({0}, {1}, {2}, {3})", this.r, this.g, this.b, this.a)
            }
        }
        t.Color = e
    }(airkit || (airkit = {})),
    function (t) {
        t.NDictionary = class {
            constructor() {
                this._dic = {}
            }
            add(e, i) {
                return this.containsKey(e) ? (t.Log.warning("NDictionary already containsKey ", e.toString()), !1) : (this._dic[e] = i, !0)
            }
            remove(t) {
                delete this._dic[t]
            }
            set(t, e) {
                this._dic[t] = e
            }
            containsKey(t) {
                return null != this._dic[t]
            }
            getValue(t) {
                return this.containsKey(t) ? this._dic[t] : null
            }
            clear() {
                for (let t in this._dic) delete this._dic[t]
            }
            getkeys() {
                let e = [];
                for (let i in this._dic) e.push(t.StringUtils.toNumber(i));
                return e
            }
            getValues() {
                let t = [];
                for (let e in this._dic) t.push(this._dic[e]);
                return t
            }
            foreach(t) {
                for (let e in this._dic)
                    if (!t.call(null, e, this._dic[e])) break
            }
            get length() {
                return t.DicUtils.getLength(this._dic)
            }
        };
        t.SDictionary = class {
            constructor() {
                this._dic = {}
            }
            add(t, e) {
                return !this.containsKey(t) && (this._dic[t] = e, !0)
            }
            set(t, e) {
                this._dic[t] = e
            }
            remove(t) {
                delete this._dic[t]
            }
            containsKey(t) {
                return null != this._dic[t]
            }
            getValue(t) {
                return this.containsKey(t) ? this._dic[t] : null
            }
            getkeys() {
                let t = [];
                for (let e in this._dic) t.push(e);
                return t
            }
            getValues() {
                let t = [];
                for (let e in this._dic) t.push(this._dic[e]);
                return t
            }
            clear() {
                for (let t in this._dic) delete this._dic[t]
            }
            foreach(t) {
                for (let e in this._dic)
                    if (!t.call(null, e, this._dic[e])) break
            }
            get length() {
                return t.DicUtils.getLength(this._dic)
            }
        }
    }(airkit || (airkit = {})),
    function (t) {
        t.DoubleArray = class {
            constructor(t, e, i) {
                if (this._array = [], t > 0 && e > 0)
                    for (let s = 0; s < t; ++s)
                        for (let t = 0; t < e; ++t) this.set(s, t, i)
            }
            set(t, e, i) {
                this._array[t] || (this._array[t] = []), this._array[t][e] = i
            }
            get(t, e) {
                return this._array[t] ? this._array[t][e] : null
            }
            clear() {
                t.ArrayUtils.clear(this._array)
            }
        }
    }(airkit || (airkit = {})),
    function (t) {
        t.LinkList = class {
            constructor() {
                this._linkHead = null, this._size = 0, this._linkHead = {
                    Data: null,
                    Prev: null,
                    Next: null
                }, this._linkHead.Prev = this._linkHead, this._linkHead.Next = this._linkHead, this._size = 0
            }
            add(t) {
                this.append(this._size, t)
            }
            insert(e, i) {
                if ((this._size < 1 || e >= this._size) && t.Log.exception("没有可插入的点或者索引溢出了"), 0 == e) this.append(this._size, i);
                else {
                    let t = this.getNode(e),
                        s = {
                            Data: i,
                            Prev: t.Prev,
                            Next: t
                        };
                    t.Prev.Next = s, t.Prev = s, this._size++
                }
            }
            append(e, i) {
                let s;
                0 == e ? s = this._linkHead : ((e -= 1) < 0 && t.Log.exception("位置不存在"), s = this.getNode(e));
                let r = {
                    Data: i,
                    Prev: s,
                    Next: s.Next
                };
                s.Next.Prev = r, s.Next = r, this._size++
            }
            del(t) {
                let e = this.getNode(t);
                e.Prev.Next = e.Next, e.Next.Prev = e.Prev, this._size--
            }
            delFirst() {
                this.del(0)
            }
            delLast() {
                this.del(this._size - 1)
            }
            get(t) {
                return this.getNode(t).Data
            }
            getFirst() {
                return this.getNode(0).Data
            }
            getLast() {
                return this.getNode(this._size - 1).Data
            }
            getNode(e) {
                if ((e < 0 || e >= this._size) && t.Log.exception("索引溢出或者链表为空"), e < this._size / 2) {
                    let t = this._linkHead.Next;
                    for (let i = 0; i < e; i++) t = t.Next;
                    return t
                }
                let i = this._linkHead.Prev,
                    s = this._size - e - 1;
                for (let t = 0; t < s; t++) i = i.Prev;
                return i
            }
            foreach(t) {
                let e = this._linkHead.Next;
                if (e)
                    do {
                        if (!t.call(null, e.Data)) break;
                        e = e.Next
                    } while (e != this._linkHead)
            }
            isEmpty() {
                return 0 == this._size
            }
            get length() {
                return this._size
            }
        }
    }(airkit || (airkit = {})),
    function (t) {
        class e {
            static get(e) {
                let i = e.objectKey;
                null == i && t.Log.error("static objectKey must set in {0} ", e.name);
                let s = this.poolsMap[i];
                null == s && (s = new Array, this.poolsMap[i] = s);
                let r = s.pop();
                return null == r && (r = new e), r && r.init && r.init(), r
            }
            static recover(t) {
                if (!t) return;
                if (null != t.parent && t.removeFromParent(), t.dispose && null == t.displayObject) return void t.dispose();
                let e = Object.getPrototypeOf(t).constructor.objectKey,
                    i = this.poolsMap[e];
                null != i && (null !== t.visible && !1 === t.visible && (t.visible = !0), i.push(t))
            }
            static clearAll() {
                t.DicUtils.foreach(this.poolsMap, (t, e) => (this.clear(t), !0))
            }
            static clear(e) {
                let i = this.poolsMap[e];
                for (t.Log.info("max object count {0}", i.length); i.length > 0;) {
                    let t = i.pop();
                    t && t.dispose && (null != t.parent ? t.removeFromParent() : null != t.displayObject.parent && t.displayObject.removeFromParent(), t.dispose())
                }
            }
        }
        e.poolsMap = {}, t.ObjectPools = e
    }(airkit || (airkit = {})),
    function (t) {
        t.Queue = class {
            constructor() {
                this._list = []
            }
            enqueue(t) {
                this._list.push(t)
            }
            dequeue() {
                return this._list.shift()
            }
            peek() {
                return 0 == this._list.length ? null : this._list[0]
            }
            seek(t) {
                return this._list.length < t ? null : this._list[t]
            }
            toArray() {
                return this._list.slice(0, this._list.length)
            }
            contains(t) {
                return -1 != this._list.indexOf(t, 0)
            }
            clear() {
                this._list.length = 0
            }
            get length() {
                return this._list.length
            }
            foreach(t) {
                for (let e of this._list)
                    if (!t.call(null, e)) break
            }
        }
    }(airkit || (airkit = {})),
    function (t) {
        t.Size = class {
            constructor(t = 0, e = 0) {
                this._width = t, this._height = e
            }
            set(t, e) {
                this._width = t, this._height = e
            }
            get width() {
                return this._width
            }
            get height() {
                return this._height
            }
        }
    }(airkit || (airkit = {})),
    function (t) {
        t.Stack = class {
            constructor() {
                this._list = []
            }
            push(t) {
                this._list.push(t)
            }
            pop() {
                return this._list.pop()
            }
            peek() {
                return 0 == this._list.length ? null : this._list[this._list.length - 1]
            }
            toArray() {
                return this._list.slice(0, this._list.length)
            }
            contains(t) {
                return -1 != this._list.indexOf(t, 0)
            }
            clear() {
                this._list.length = 0
            }
            get length() {
                return this._list.length
            }
            foreach(t) {
                for (let e of this._list)
                    if (!t.call(null, e)) break
            }
        }
    }(airkit || (airkit = {})),
    function (t) {
        let e, i, s, r, a, n, l;
        t.LOADVIEW_TYPE_NONE = 0,
            function (t) {
                t[t.POPUP = 1] = "POPUP", t[t.ALERT = 2] = "ALERT"
            }(e = t.eUIQueueType || (t.eUIQueueType = {})), i = t.ePopupAnim || (t.ePopupAnim = {}),
            function (t) {
                t[t.CLOSE_CENTER = 1] = "CLOSE_CENTER"
            }(s = t.eCloseAnim || (t.eCloseAnim = {})),
            function (t) {
                t[t.NONE = 0] = "NONE", t[t.RIGHT = 1] = "RIGHT", t[t.RIGHT_BOTTOM = 2] = "RIGHT_BOTTOM", t[t.BOTTOM = 3] = "BOTTOM", t[t.LEFT_BOTTOM = 4] = "LEFT_BOTTOM", t[t.LEFT = 5] = "LEFT", t[t.LEFT_TOP = 6] = "LEFT_TOP", t[t.TOP = 7] = "TOP", t[t.RIGHT_TOP = 8] = "RIGHT_TOP", t[t.MID = 9] = "MID"
            }(r = t.eAligeType || (t.eAligeType = {})),
            function (t) {
                t[t.BG = 0] = "BG", t[t.MAIN = 1] = "MAIN", t[t.GUI = 2] = "GUI", t[t.POPUP = 3] = "POPUP", t[t.TOOLTIP = 4] = "TOOLTIP", t[t.SYSTEM = 5] = "SYSTEM", t[t.LOADING = 6] = "LOADING", t[t.TOP = 7] = "TOP", t[t.MAX = 8] = "MAX"
            }(a = t.eUILayer || (t.eUILayer = {})),
            function (t) {
                t[t.DEBUG = 7] = "DEBUG", t[t.INFO = 6] = "INFO", t[t.WARNING = 5] = "WARNING", t[t.ERROR = 4] = "ERROR", t[t.EXCEPTION = 3] = "EXCEPTION"
            }(n = t.LogLevel || (t.LogLevel = {})),
            function (t) {
                t[t.Close = 0] = "Close", t[t.Cancel = 1] = "Cancel", t[t.Ok = 2] = "Ok"
            }(l = t.ePopupButton || (t.ePopupButton = {}))
    }(airkit || (airkit = {})),
    function (t) {
        t.ConfigItem = class {
            constructor(t, e, i) {
                this.url = t, this.name = e, this.key = i
            }
        }
    }(airkit || (airkit = {})),
    function (t) {
        class e extends t.Singleton {
            static get Instance() {
                return this.instance || (this.instance = new e), this.instance
            }
            init(i, s = null) {
                null != s && (e.zipUrl = s), this._listTables = [];
                let r = i;
                for (let e in r) this._listTables.push(new t.ConfigItem(e, e, r[e]))
            }
            release() {
                if (this._listTables) {
                    for (let e of this._listTables) t.DataProvider.Instance.unload(e.url);
                    t.ArrayUtils.clear(this._listTables), this._listTables = null
                }
            }
            loadAll() {
                if (this._listTables.length > 0) return t.DataProvider.Instance.enableZip(), t.DataProvider.Instance.loadZip(e.zipUrl, this._listTables)
            }
            getList(e, i) {
                let s = t.DataProvider.Instance.getConfig(e);
                if (null == s) return [];
                null == i && (i = []);
                let r = [];
                for (let t in s) {
                    let e = s[t],
                        a = !0;
                    for (let t = 0; t < i.length; t++) {
                        let s = i[t].k,
                            r = i[t].v;
                        if (e[s] != r) {
                            a = !1;
                            break
                        }
                    }
                    a && r.push(e)
                }
                return r
            }
            getInfo(e, i) {
                return t.DataProvider.Instance.getInfo(e, i)
            }
            get listTables() {
                return this._listTables
            }
        }
        e.instance = null, e.zipUrl = "res/config.zip", t.ConfigManger = e
    }(airkit || (airkit = {})),
    function (t) {
        class e extends t.Singleton {
            constructor() {
                super(...arguments), this._dicTemplate = null, this._dicData = null
            }
            static get Instance() {
                return this.instance || (this.instance = new e), this.instance
            }
            enableZip() {
                this._zip = !0
            }
            setup() {
                this._dicTemplate = new t.SDictionary, this._dicData = new t.SDictionary, this._zip = !1
            }
            destroy() {
                this.unloadAll(), this._dicTemplate && (this._dicTemplate.clear(), this._dicTemplate = null), this._dicData && (this._dicData.clear(), this._dicData = null)
            }
            loadZip(e, i) {
                return new Promise((s, r) => {
                    t.ResourceManager.Instance.loadRes(e, Laya.Loader.BUFFER).then(a => {
                        let n = t.ResourceManager.Instance.getRes(e);
                        t.ZipUtils.unzip(n).then(e => {
                            for (let s = 0; s < i.length; s++) {
                                let r = i[s];
                                this._dicTemplate.add(i[s].url, r), t.Log.info("Load config {0}", r.url);
                                let a = JSON.parse(e[r.url]);
                                if (t.StringUtils.isNullOrEmpty(r.key)) this._dicData.add(r.name, a);
                                else {
                                    let e, i, s = {},
                                        n = 0,
                                        l = Array.isArray(r.key);
                                    for (; a[n];) {
                                        if (i = a[n], l) {
                                            e = i[r.key[0]];
                                            for (let t = 1; t < r.key.length; t++) e += "_" + i[r.key[t]]
                                        } else e = i[r.key];
                                        t.assertNullOrNil(e, "配置表解析错误:" + r.url), s[e] = i, n++
                                    }
                                    this._dicData.add(r.name, s)
                                }
                            }
                            s(e)
                        }).catch(e => {
                            t.Log.error(e), r(e)
                        })
                    })
                })
            }
            load(e) {
                return new Promise((i, s) => {
                    let r = [];
                    for (let i = 0; i < e.length; i++) t.ResourceManager.Instance.getRes(e[i].url) || (r.push({
                        url: e[i].url,
                        type: Laya.Loader.JSON
                    }), this._dicTemplate.add(e[i].url, e[i]));
                    0 != r.length ? t.ResourceManager.Instance.loadArrayRes(r, null, null, null, null, t.ResourceManager.SystemGroup).then(t => {
                        for (let e = 0; e < t.length; e++) this.onLoadComplete(t[e]), i(t)
                    }).catch(t => {
                        s(t)
                    }) : i([])
                })
            }
            unload(e) {
                let i = this._dicTemplate.getValue(e);
                i && this._dicData.remove(i.name), this._zip || t.ResourceManager.Instance.clearRes(e), this._dicTemplate.remove(e)
            }
            unloadAll() {
                this._dicTemplate && (this._dicTemplate.foreach(function (t, e) {
                    return this.Unload(t), !0
                }), this._dicData.clear(), this._dicTemplate.clear())
            }
            getConfig(t) {
                return this._dicData.getValue(t)
            }
            getInfo(t, e) {
                let i = this._dicData.getValue(t);
                if (i) {
                    let t;
                    if (Array.isArray(e)) {
                        t = e[0];
                        for (let i = 1; i < e.length; i++) t += "_" + e[i]
                    } else t = e;
                    return i[t]
                }
                return null
            }
            getRes(e) {
                t.Log.debug("[load]加载配置表:" + e);
                let i = this._dicTemplate.getValue(e);
                if (i) {
                    let s = t.ResourceManager.Instance.getRes(e);
                    if (t.StringUtils.isNullOrEmpty(i.key)) this._dicData.add(i.name, s);
                    else {
                        let e, r, a = {},
                            n = 0,
                            l = Array.isArray(i.key);
                        for (; s[n];) {
                            if (r = s[n], l) {
                                e = r[i.key[0]];
                                for (let t = 1; t < i.key.length; t++) e += "_" + r[i.key[t]]
                            } else e = r[i.key];
                            t.assertNullOrNil(e, "配置表解析错误:" + i.url), a[e] = r, n++
                        }
                        this._dicData.add(i.name, a)
                    }
                }
            }
            onLoadComplete(t) {
                this.getRes(t)
            }
        }
        e.instance = null, t.DataProvider = e
    }(airkit || (airkit = {})),
    function (t) {
        function e(t) {
            for (var e = new ArrayBuffer(t.length), i = new Uint8Array(e), s = 0; s < t.length; ++s) i[s] = t.charCodeAt(s);
            return e
        }
        t.base64_encode = function (t) {
            let s = new i,
                r = e(t);
            return s.encode(r)
        }, t.stringToArrayBuffer = e;
        class i {
            constructor() {
                this.alphabet = ["A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "+", "/"], this.values = {};
                for (let t = 0; t < 64; ++t) this.values[this.alphabet[t]] = t
            }
            encode(t) {
                const e = new Uint8Array(t),
                    i = [];
                let s, r, a = 0;
                for (; a + 2 < e.byteLength;) r = (s = e[a] << 16 | e[a + 1] << 8 | e[a + 2]) >> 18 & 63, i.push(this.alphabet[r]), r = s >> 12 & 63, i.push(this.alphabet[r]), r = s >> 6 & 63, i.push(this.alphabet[r]), r = 63 & s, i.push(this.alphabet[r]), a += 3;
                return a + 1 === e.byteLength ? (r = (s = e[a] << 4) >> 6 & 63, i.push(this.alphabet[r]), r = 63 & s, i.push(this.alphabet[r]), i.push("==")) : a + 2 === e.byteLength && (r = (s = e[a] << 10 | e[a + 1] << 2) >> 12 & 63, i.push(this.alphabet[r]), r = s >> 6 & 63, i.push(this.alphabet[r]), r = 63 & s, i.push(this.alphabet[r]), i.push("=")), i.join("")
            }
            decode(t) {
                let e = t.length;
                if (0 === e) return new Uint8Array(new ArrayBuffer(0));
                if (e % 4 != 0) throw new Error("Bad length: " + e);
                if (!t.match(/^[a-zA-Z0-9+\/]+={0,2}$/)) throw new Error("Invalid base64 encoded value");
                let i = e / 4 * 3,
                    s = 0;
                "=" === t.charAt(e - 1) && (s++, i--), "=" === t.charAt(e - 2) && (s++, i--);
                const r = new Uint8Array(new ArrayBuffer(i));
                let a, n = 0,
                    l = 0;
                for (s > 0 && (e -= 4); n < e;) {
                    a = 0;
                    for (let e = 0; e < 4; ++e) a = a << 6 | this.values[t.charAt(n + e)];
                    r[l++] = a >> 16 & 255, r[l++] = a >> 8 & 255, r[l++] = 255 & a, n += 4
                }
                if (s > 0) {
                    a = 0;
                    for (let e = 0; e < 4 - s; ++e) a = a << 6 | this.values[t.charAt(n + e)];
                    1 === s ? (a >>= 2, r[l++] = a >> 8 & 255, r[l++] = 255 & a) : (a >>= 4, r[l++] = 255 & a)
                }
                return r
            }
        }
        t.Base64 = i
    }(airkit || (airkit = {})),
    function (t) {
        t.md5_encrypt = function (t) {
            return (new e).hex_md5(t)
        };
        class e {
            constructor() {
                this.hexcase = 0, this.b64pad = ""
            }
            hex_md5(t) {
                return this.rstr2hex(this.rstr_md5(this.str2rstr_utf8(t)))
            }
            b64_md5(t) {
                return this.rstr2b64(this.rstr_md5(this.str2rstr_utf8(t)))
            }
            any_md5(t, e) {
                return this.rstr2any(this.rstr_md5(this.str2rstr_utf8(t)), e)
            }
            hex_hmac_md5(t, e) {
                return this.rstr2hex(this.rstr_hmac_md5(this.str2rstr_utf8(t), this.str2rstr_utf8(e)))
            }
            b64_hmac_md5(t, e) {
                return this.rstr2b64(this.rstr_hmac_md5(this.str2rstr_utf8(t), this.str2rstr_utf8(e)))
            }
            any_hmac_md5(t, e, i) {
                return this.rstr2any(this.rstr_hmac_md5(this.str2rstr_utf8(t), this.str2rstr_utf8(e)), i)
            }
            md5_vm_test() {
                return "900150983cd24fb0d6963f7d28e17f72" == this.hex_md5("abc").toLowerCase()
            }
            rstr_md5(t) {
                return this.binl2rstr(this.binl_md5(this.rstr2binl(t), 8 * t.length))
            }
            rstr_hmac_md5(t, e) {
                var i = this.rstr2binl(t);
                i.length > 16 && (i = this.binl_md5(i, 8 * t.length));
                for (var s = Array(16), r = Array(16), a = 0; a < 16; a++) s[a] = 909522486 ^ i[a], r[a] = 1549556828 ^ i[a];
                var n = this.binl_md5(s.concat(this.rstr2binl(e)), 512 + 8 * e.length);
                return this.binl2rstr(this.binl_md5(r.concat(n), 640))
            }
            rstr2hex(t) {
                try {
                    this.hexcase
                } catch (t) {
                    this.hexcase = 0
                }
                for (var e, i = this.hexcase ? "0123456789ABCDEF" : "0123456789abcdef", s = "", r = 0; r < t.length; r++) e = t.charCodeAt(r), s += i.charAt(e >>> 4 & 15) + i.charAt(15 & e);
                return s
            }
            rstr2b64(t) {
                try {
                    this.b64pad
                } catch (t) {
                    this.b64pad = ""
                }
                for (var e = "", i = t.length, s = 0; s < i; s += 3)
                    for (var r = t.charCodeAt(s) << 16 | (s + 1 < i ? t.charCodeAt(s + 1) << 8 : 0) | (s + 2 < i ? t.charCodeAt(s + 2) : 0), a = 0; a < 4; a++) 8 * s + 6 * a > 8 * t.length ? e += this.b64pad : e += "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".charAt(r >>> 6 * (3 - a) & 63);
                return e
            }
            rstr2any(t, e) {
                var i, s, r, a, n, l = e.length,
                    o = Array(Math.ceil(t.length / 2));
                for (i = 0; i < o.length; i++) o[i] = t.charCodeAt(2 * i) << 8 | t.charCodeAt(2 * i + 1);
                var h = Math.ceil(8 * t.length / (Math.log(e.length) / Math.log(2))),
                    c = Array(h);
                for (s = 0; s < h; s++) {
                    for (n = Array(), a = 0, i = 0; i < o.length; i++) a = (a << 16) + o[i], a -= (r = Math.floor(a / l)) * l, (n.length > 0 || r > 0) && (n[n.length] = r);
                    c[s] = a, o = n
                }
                var u = "";
                for (i = c.length - 1; i >= 0; i--) u += e.charAt(c[i]);
                return u
            }
            str2rstr_utf8(t) {
                for (var e, i, s = "", r = -1; ++r < t.length;) e = t.charCodeAt(r), i = r + 1 < t.length ? t.charCodeAt(r + 1) : 0, 55296 <= e && e <= 56319 && 56320 <= i && i <= 57343 && (e = 65536 + ((1023 & e) << 10) + (1023 & i), r++), e <= 127 ? s += String.fromCharCode(e) : e <= 2047 ? s += String.fromCharCode(192 | e >>> 6 & 31, 128 | 63 & e) : e <= 65535 ? s += String.fromCharCode(224 | e >>> 12 & 15, 128 | e >>> 6 & 63, 128 | 63 & e) : e <= 2097151 && (s += String.fromCharCode(240 | e >>> 18 & 7, 128 | e >>> 12 & 63, 128 | e >>> 6 & 63, 128 | 63 & e));
                return s
            }
            str2rstr_utf16le(t) {
                for (var e = "", i = 0; i < t.length; i++) e += String.fromCharCode(255 & t.charCodeAt(i), t.charCodeAt(i) >>> 8 & 255);
                return e
            }
            str2rstr_utf16be(t) {
                for (var e = "", i = 0; i < t.length; i++) e += String.fromCharCode(t.charCodeAt(i) >>> 8 & 255, 255 & t.charCodeAt(i));
                return e
            }
            rstr2binl(t) {
                for (var e = Array(t.length >> 2), i = 0; i < e.length; i++) e[i] = 0;
                for (i = 0; i < 8 * t.length; i += 8) e[i >> 5] |= (255 & t.charCodeAt(i / 8)) << i % 32;
                return e
            }
            binl2rstr(t) {
                for (var e = "", i = 0; i < 32 * t.length; i += 8) e += String.fromCharCode(t[i >> 5] >>> i % 32 & 255);
                return e
            }
            binl_md5(t, e) {
                t[e >> 5] |= 128 << e % 32, t[14 + (e + 64 >>> 9 << 4)] = e;
                for (var i = 1732584193, s = -271733879, r = -1732584194, a = 271733878, n = 0; n < t.length; n += 16) {
                    var l = i,
                        o = s,
                        h = r,
                        c = a;
                    i = this.md5_ff(i, s, r, a, t[n + 0], 7, -680876936), a = this.md5_ff(a, i, s, r, t[n + 1], 12, -389564586), r = this.md5_ff(r, a, i, s, t[n + 2], 17, 606105819), s = this.md5_ff(s, r, a, i, t[n + 3], 22, -1044525330), i = this.md5_ff(i, s, r, a, t[n + 4], 7, -176418897), a = this.md5_ff(a, i, s, r, t[n + 5], 12, 1200080426), r = this.md5_ff(r, a, i, s, t[n + 6], 17, -1473231341), s = this.md5_ff(s, r, a, i, t[n + 7], 22, -45705983), i = this.md5_ff(i, s, r, a, t[n + 8], 7, 1770035416), a = this.md5_ff(a, i, s, r, t[n + 9], 12, -1958414417), r = this.md5_ff(r, a, i, s, t[n + 10], 17, -42063), s = this.md5_ff(s, r, a, i, t[n + 11], 22, -1990404162), i = this.md5_ff(i, s, r, a, t[n + 12], 7, 1804603682), a = this.md5_ff(a, i, s, r, t[n + 13], 12, -40341101), r = this.md5_ff(r, a, i, s, t[n + 14], 17, -1502002290), s = this.md5_ff(s, r, a, i, t[n + 15], 22, 1236535329), i = this.md5_gg(i, s, r, a, t[n + 1], 5, -165796510), a = this.md5_gg(a, i, s, r, t[n + 6], 9, -1069501632), r = this.md5_gg(r, a, i, s, t[n + 11], 14, 643717713), s = this.md5_gg(s, r, a, i, t[n + 0], 20, -373897302), i = this.md5_gg(i, s, r, a, t[n + 5], 5, -701558691), a = this.md5_gg(a, i, s, r, t[n + 10], 9, 38016083), r = this.md5_gg(r, a, i, s, t[n + 15], 14, -660478335), s = this.md5_gg(s, r, a, i, t[n + 4], 20, -405537848), i = this.md5_gg(i, s, r, a, t[n + 9], 5, 568446438), a = this.md5_gg(a, i, s, r, t[n + 14], 9, -1019803690), r = this.md5_gg(r, a, i, s, t[n + 3], 14, -187363961), s = this.md5_gg(s, r, a, i, t[n + 8], 20, 1163531501), i = this.md5_gg(i, s, r, a, t[n + 13], 5, -1444681467), a = this.md5_gg(a, i, s, r, t[n + 2], 9, -51403784), r = this.md5_gg(r, a, i, s, t[n + 7], 14, 1735328473), s = this.md5_gg(s, r, a, i, t[n + 12], 20, -1926607734), i = this.md5_hh(i, s, r, a, t[n + 5], 4, -378558), a = this.md5_hh(a, i, s, r, t[n + 8], 11, -2022574463), r = this.md5_hh(r, a, i, s, t[n + 11], 16, 1839030562), s = this.md5_hh(s, r, a, i, t[n + 14], 23, -35309556), i = this.md5_hh(i, s, r, a, t[n + 1], 4, -1530992060), a = this.md5_hh(a, i, s, r, t[n + 4], 11, 1272893353), r = this.md5_hh(r, a, i, s, t[n + 7], 16, -155497632), s = this.md5_hh(s, r, a, i, t[n + 10], 23, -1094730640), i = this.md5_hh(i, s, r, a, t[n + 13], 4, 681279174), a = this.md5_hh(a, i, s, r, t[n + 0], 11, -358537222), r = this.md5_hh(r, a, i, s, t[n + 3], 16, -722521979), s = this.md5_hh(s, r, a, i, t[n + 6], 23, 76029189), i = this.md5_hh(i, s, r, a, t[n + 9], 4, -640364487), a = this.md5_hh(a, i, s, r, t[n + 12], 11, -421815835), r = this.md5_hh(r, a, i, s, t[n + 15], 16, 530742520), s = this.md5_hh(s, r, a, i, t[n + 2], 23, -995338651), i = this.md5_ii(i, s, r, a, t[n + 0], 6, -198630844), a = this.md5_ii(a, i, s, r, t[n + 7], 10, 1126891415), r = this.md5_ii(r, a, i, s, t[n + 14], 15, -1416354905), s = this.md5_ii(s, r, a, i, t[n + 5], 21, -57434055), i = this.md5_ii(i, s, r, a, t[n + 12], 6, 1700485571), a = this.md5_ii(a, i, s, r, t[n + 3], 10, -1894986606), r = this.md5_ii(r, a, i, s, t[n + 10], 15, -1051523), s = this.md5_ii(s, r, a, i, t[n + 1], 21, -2054922799), i = this.md5_ii(i, s, r, a, t[n + 8], 6, 1873313359), a = this.md5_ii(a, i, s, r, t[n + 15], 10, -30611744), r = this.md5_ii(r, a, i, s, t[n + 6], 15, -1560198380), s = this.md5_ii(s, r, a, i, t[n + 13], 21, 1309151649), i = this.md5_ii(i, s, r, a, t[n + 4], 6, -145523070), a = this.md5_ii(a, i, s, r, t[n + 11], 10, -1120210379), r = this.md5_ii(r, a, i, s, t[n + 2], 15, 718787259), s = this.md5_ii(s, r, a, i, t[n + 9], 21, -343485551), i = this.safe_add(i, l), s = this.safe_add(s, o), r = this.safe_add(r, h), a = this.safe_add(a, c)
                }
                return [i, s, r, a]
            }
            md5_cmn(t, e, i, s, r, a) {
                return this.safe_add(this.bit_rol(this.safe_add(this.safe_add(e, t), this.safe_add(s, a)), r), i)
            }
            md5_ff(t, e, i, s, r, a, n) {
                return this.md5_cmn(e & i | ~e & s, t, e, r, a, n)
            }
            md5_gg(t, e, i, s, r, a, n) {
                return this.md5_cmn(e & s | i & ~s, t, e, r, a, n)
            }
            md5_hh(t, e, i, s, r, a, n) {
                return this.md5_cmn(e ^ i ^ s, t, e, r, a, n)
            }
            md5_ii(t, e, i, s, r, a, n) {
                return this.md5_cmn(i ^ (e | ~s), t, e, r, a, n)
            }
            safe_add(t, e) {
                var i = (65535 & t) + (65535 & e);
                return (t >> 16) + (e >> 16) + (i >> 16) << 16 | 65535 & i
            }
            bit_rol(t, e) {
                return t << e | t >>> 32 - e
            }
        }
        t.MD5 = e
    }(airkit || (airkit = {})),
    function (t) {
        t.EventArgs = class {
            constructor(...e) {
                this._type = "", this._data = null, e && 0 != e.length && (e instanceof Array ? this._data = t.ArrayUtils.copy(e[0]) : this._data = t.ArrayUtils.copy(e))
            }
            init(...e) {
                0 != e.length && (e instanceof Array ? this._data = t.ArrayUtils.copy(e[0]) : this._data = t.ArrayUtils.copy(e))
            }
            get(t) {
                return this._data && 0 != this._data.length ? t < 0 || t >= this._data.length ? null : this._data[t] : null
            }
            get type() {
                return this._type
            }
            set type(t) {
                this._type = t
            }
        }
    }(airkit || (airkit = {})),
    function (t) {
        class e extends t.Singleton {
            constructor() {
                super(), this._event = null, this._evtArgs = null, this._event = new t.EventDispatcher, this._evtArgs = new t.EventArgs
            }
            static get Instance() {
                return this.instance || (this.instance = new e), this.instance
            }
            static addEventListener(t, i, s) {
                e.Instance._event.addEventListener(t, i, s)
            }
            static removeEventListener(t, i, s) {
                e.Instance._event.removeEventListener(t, i, s)
            }
            static dispatchEvent(t, ...i) {
                e.Instance._evtArgs.init(i), e.Instance._event.dispatchEvent(t, e.Instance._evtArgs)
            }
            static clear() {
                e.Instance._event.clear()
            }
        }
        e.instance = null, t.EventCenter = e
    }(airkit || (airkit = {})),
    function (t) {
        t.EventDispatcher = class {
            constructor() {
                this._dicFuns = {}, this._evtArgs = null, this._evtArgs = new t.EventArgs
            }
            addEventListener(t, e, i) {
                if (this._dicFuns[t]) {
                    let s = this._dicFuns[t];
                    for (let t of s)
                        if (t.caller == e && t.method == i) return;
                    s.push(Laya.Handler.create(e, i, null, !1))
                } else this._dicFuns[t] = [], this._dicFuns[t].push(Laya.Handler.create(e, i, null, !1))
            }
            removeEventListener(t, e, i) {
                let s = this._dicFuns[t];
                if (s)
                    for (let t = 0; t < s.length; ++t) {
                        let r = s[t];
                        if (r.caller == e && r.method == i) {
                            r.recover(), s.splice(t, 1);
                            break
                        }
                    }
            }
            dispatchEvent(t, e) {
                e.type = t;
                let i = this._dicFuns[t];
                if (i)
                    for (let t of i) t.runWith(e)
            }
            dispatch(t, ...e) {
                this._evtArgs.init(e), this.dispatchEvent(t, this._evtArgs)
            }
            clear() {
                t.DicUtils.clearDic(this._dicFuns)
            }
        }
    }(airkit || (airkit = {})),
    function (t) {
        class e {}
        e.BEGIN_GAME = "BEGIN_GAME", e.RESTART_GAEM = "RESTART_GAME", e.STOP_GAME = "STOP_GAME", e.PAUSE_GAME = "PAUSE_GAME", e.ON_SHOW = "ON_SHOW", e.ON_HIDE = "ON_HIDE", e.CHANGE_SCENE = "CHANGE_SCENE", e.BEGIN_MODULE = "BEGIN_MODULE", e.END_MODULE = "END_MODULE", e.UI_OPEN = "UI_OPEN", e.UI_CLOSE = "UI_CLOSE", e.UI_LANG = "UI_LANG", t.EventID = e;
        class i {}
        i.RESOURCE_LOAD_COMPLATE = "RESOURCE_LOAD_COMPLATE", i.RESOURCE_LOAD_PROGRESS = "RESOURCE_LOAD_PROGRESS", i.RESOURCE_LOAD_FAILED = "RESOURCE_LOAD_FAILED", i.LOADVIEW_OPEN = "LOADVIEW_OPEN", i.LOADVIEW_COMPLATE = "LOADVIEW_COMPLATE", i.LOADVIEW_PROGRESS = "LOADVIEW_PROGRESS", t.LoaderEventID = i
    }(airkit || (airkit = {})),
    function (t) {
        t.Signal = class {
            constructor() {}
            destory() {
                this._listener && this._listener.destory(), this._listener = null
            }
            dispatch(t) {
                this._listener && this._listener.execute(t)
            }
            has(t) {
                return null != this._listener && this._listener.has(t)
            }
            on(t, e, ...i) {
                this.makeSureListenerManager(), this._listener.on(t, e, i, !1)
            }
            once(t, e, ...i) {
                this.makeSureListenerManager(), this._listener.on(t, e, i, !0)
            }
            off(t, e) {
                this._listener && this._listener.off(t, e)
            }
            makeSureListenerManager() {
                this._listener || (this._listener = new e)
            }
        };
        class e {
            constructor() {
                this.stopped = !1
            }
            destory() {
                this.stopped = !1, this.clear()
            }
            has(t) {
                for (let e = 0; e < this.handlers.length; e++)
                    if (this.handlers[e].caller == t) return !0;
                return !1
            }
            on(t, e, i, s = !1) {
                this.handlers || (this.handlers = []);
                let r = new Laya.Handler(t, e, i, s);
                return this.handlers.push(r), r
            }
            off(t, e) {
                if (!this.handlers || this.handlers.length <= 0) return;
                let i = [];
                for (var s = 0; s < this.handlers.length; s++) {
                    var r = this.handlers[s];
                    if (r.caller === t && r.method === e) {
                        r.recover();
                        break
                    }
                    i.push(r)
                }
                for (++s; s < this.handlers.length; ++s) i.push(this.handlers[s]);
                this.handlers = i
            }
            offAll(t, e) {
                if (!this.handlers || this.handlers.length <= 0) return;
                let i = [],
                    s = this.handlers,
                    r = s.length;
                for (var a = 0; a < r; ++a) t !== s[a].caller || e !== s[a].method ? i.push(s[a]) : s[a].recover();
                this.handlers = i
            }
            clear() {
                if (this.handlers && !(this.handlers.length <= 0)) {
                    for (var t = 0; t < this.handlers.length; t++) {
                        this.handlers[t].recover()
                    }
                    this.handlers = null
                }
            }
            stop() {
                this.stopped = !0
            }
            execute(...t) {
                if (!this.handlers || this.handlers.length <= 0) return;
                let e, i = this.handlers,
                    s = i.length,
                    r = [],
                    a = 0;
                for (; a < s && !this.stopped; ++a)(e = i[a]).runWith(t), e.method && r.push(e);
                for (; a < s; ++a) r.push(i[a]);
                this.stopped = !1, this.handlers = r, e = null, i = null, r = null
            }
        }
        t.SignalListener = e
    }(airkit || (airkit = {})),
    function (t) {
        t.L = function (i, ...s) {
            let r = e.Instance.getText(e.Instance.curLang, i);
            return null == r ? "unknown key:" + i : t.StringUtils.format(r, ...s)
        };
        class e extends t.Singleton {
            static get Instance() {
                return this.instance || (this.instance = new e), this.instance
            }
            init() {
                this._curLang = null
            }
            destory() {}
            changeLang(e) {
                return new Promise((i, s) => {
                    if (e == this._curLang) return void i(e);
                    t.ConfigManger.Instance.getList(this._curLang) ? t.DataProvider.Instance.getConfig(e) && (this._curLang = e, t.EventCenter.dispatchEvent(t.EventID.UI_LANG, this._curLang), i(e)) : (t.Log.error("no lang package {0} ", e), s("no lang package " + e))
                })
            }
            getText(e, i) {
                let s = t.DataProvider.Instance.getInfo(e, i);
                return s ? s.name : (t.Log.error("cant get lang key", i), "")
            }
            get curLang() {
                return this._curLang
            }
        }
        e.instance = null, t.LangManager = e
    }(airkit || (airkit = {})),
    function (t) {
        class e extends t.Singleton {
            static registerLoadingView(t, e, i) {
                this.loaders.add(t, e), Laya.ClassUtils.regClass(e, i)
            }
            static get Instance() {
                return this.instance || (this.instance = new e), this.instance
            }
            setup() {
                this.registerEvent(), this._dicLoadView = new t.NDictionary
            }
            destroy() {
                if (this.unRegisterEvent(), this._dicLoadView) {
                    let t = null;
                    this._dicLoadView.foreach(function (e, i) {
                        return (t = i).close(), !0
                    }), this._dicLoadView.clear(), this._dicLoadView = null
                }
            }
            registerEvent() {
                t.EventCenter.addEventListener(t.LoaderEventID.LOADVIEW_OPEN, this, this.onLoadViewEvt), t.EventCenter.addEventListener(t.LoaderEventID.LOADVIEW_COMPLATE, this, this.onLoadViewEvt), t.EventCenter.addEventListener(t.LoaderEventID.LOADVIEW_PROGRESS, this, this.onLoadViewEvt)
            }
            unRegisterEvent() {
                t.EventCenter.removeEventListener(t.LoaderEventID.LOADVIEW_OPEN, this, this.onLoadViewEvt), t.EventCenter.removeEventListener(t.LoaderEventID.LOADVIEW_COMPLATE, this, this.onLoadViewEvt), t.EventCenter.removeEventListener(t.LoaderEventID.LOADVIEW_PROGRESS, this, this.onLoadViewEvt)
            }
            onLoadViewEvt(e) {
                let i = e.type,
                    s = e.get(0);
                switch (i) {
                    case t.LoaderEventID.LOADVIEW_OPEN: {
                        t.Log.debug("显示加载界面");
                        let i = e.get(1),
                            r = e.get(2);
                        this.show(s, i, r)
                    }
                    break;
                case t.LoaderEventID.LOADVIEW_PROGRESS: {
                    let t = e.get(1),
                        i = e.get(2);
                    this.setProgress(s, t, i)
                }
                break;
                case t.LoaderEventID.LOADVIEW_COMPLATE:
                    t.Log.debug("加载界面关闭"), this.close(s)
                }
            }
            show(i, s, r) {
                if (null == i || i == t.LOADVIEW_TYPE_NONE) return;
                let a = this._dicLoadView.getValue(i);
                if (a) this.updateView(a, s, r);
                else {
                    let n = e.loaders.getValue(i);
                    if (n.length > 0) {
                        if (null == (a = Laya.ClassUtils.getInstance(n))) return;
                        a.setup([]);
                        let e = Laya.ClassUtils.getClass(n);
                        a.loadResource(t.ResourceManager.SystemGroup, e).then(() => {
                            t.LayerManager.loadingLayer.addChild(a), this._dicLoadView.add(i, a), this.updateView(a, s, r)
                        })
                    } else t.Log.error("Must set loadingview first type= {0}", i)
                }
            }
            updateView(e, i, s) {
                e.parent || t.LayerManager.loadingLayer.addChild(e), e.onOpen(i), e.setTips(s), e.setVisible(!0)
            }
            setProgress(t, e, i) {
                let s = this._dicLoadView.getValue(t);
                s && s.setProgress(e, i)
            }
            close(t) {
                let e = this._dicLoadView.getValue(t);
                e && (e.setVisible(!1), e.onClose(), this._dicLoadView.remove(t), e = null)
            }
        }
        e.loaders = new t.NDictionary, e.instance = null, t.LoaderManager = e
    }(airkit || (airkit = {})),
    function (t) {
        t.FONT_SIZE_4 = 18, t.FONT_SIZE_5 = 22, t.FONT_SIZE_6 = 25, t.FONT_SIZE_7 = 29;
        class e extends t.Singleton {
            constructor() {
                super(...arguments), this._dicLoaderUrl = null
            }
            static get Instance() {
                return this.instance || (this.instance = new e), this.instance
            }
            setup() {
                this._dicLoaderUrl = new t.SDictionary, this._spineDic = new t.SDictionary, this._minLoaderTime = 1e3, this._aniAnimDic = new t.SDictionary, this.onAniResUpdateSignal = new t.Signal
            }
            static asyncLoad(t, e, i, s, r, a, n) {
                return new Promise((l, o) => {
                    let h = function (e) {
                        Laya.loader.off(Laya.Event.ERROR, null, h), o(t)
                    };
                    Laya.loader.load(t, Laya.Handler.create(this, e => {
                        Laya.loader.off(Laya.Event.ERROR, null, h), l(t)
                    }), e, i, s, r, a, n), Laya.loader.on(Laya.Event.ERROR, null, h)
                })
            }
            destroy() {
                this._dicLoaderUrl && (this._dicLoaderUrl.clear(), this._dicLoaderUrl = null)
            }
            update(t) {}
            getRes(t) {
                return this.refreshResourceTime(t, null, !1), Laya.loader.getRes(t)
            }
            loadRes(i, s = "", r = t.LOADVIEW_TYPE_NONE, a = 1, n = !0, l = "default", o = !1) {
                return this.refreshResourceTime(i, l, !0), null == r && (r = t.LOADVIEW_TYPE_NONE), r != t.LOADVIEW_TYPE_NONE && Laya.loader.getRes(i) && (r = t.LOADVIEW_TYPE_NONE), r != t.LOADVIEW_TYPE_NONE && t.EventCenter.dispatchEvent(t.LoaderEventID.LOADVIEW_OPEN, r, 1), new Promise((t, h) => {
                    e.asyncLoad(i, Laya.Handler.create(this, this.onLoadProgress, [r, 1], !1), s, a, n, l, o).then(e => {
                        this.onLoadComplete(r, [i]), t(i)
                    }).catch(t => {
                        h(t)
                    })
                })
            }
            loadArrayRes(i, s = t.LOADVIEW_TYPE_NONE, r = null, a = 1, n = !0, l = "default", o = !1) {
                let h = !1,
                    c = [],
                    u = [];
                Laya.loader.maxLoader = 4, null == s && (s = t.LOADVIEW_TYPE_NONE), null == a && (a = 1), null == n && (n = !0);
                for (let t of i) c.push({
                    url: t.url,
                    type: t.type
                }), u.push(t.url), h || Laya.loader.getRes(t.url) || (h = !0), this.refreshResourceTime(t.url, l, !0);
                return h || s == t.LOADVIEW_TYPE_NONE || (s = t.LOADVIEW_TYPE_NONE), s != t.LOADVIEW_TYPE_NONE && t.EventCenter.dispatchEvent(t.LoaderEventID.LOADVIEW_OPEN, s, c.length, r), new Promise((i, h) => {
                    e.asyncLoad(c, Laya.Handler.create(this, this.onLoadProgress, [s, c.length, r], !1), void 0, a, n, l, o).then(e => {
                        s != t.LOADVIEW_TYPE_NONE ? t.TimerManager.Instance.addOnce(this._minLoaderTime, null, t => {
                            this.onLoadComplete(s, u, r), i(u)
                        }) : (this.onLoadComplete(s, u, r), i(u))
                    }).catch(t => {
                        h(t)
                    })
                })
            }
            onLoadComplete(e, ...s) {
                if (s) {
                    let e = s[0];
                    for (let s of e) {
                        t.Log.debug("[load]加载完成url:" + s);
                        var r = s.lastIndexOf(".bin");
                        if (r > 0) {
                            let e = s.substr(0, r);
                            fgui.UIPackage.addPackage(e), t.Log.info("add Package :" + e)
                        }
                        let e = this._dicLoaderUrl.getValue(s);
                        e && e.updateStatus(i.LOADED)
                    }
                }
                e != t.LOADVIEW_TYPE_NONE && t.EventCenter.dispatchEvent(t.LoaderEventID.LOADVIEW_COMPLATE, e)
            }
            onLoadProgress(e, i, s, r) {
                let a = t.NumberUtils.toInt(Math.floor(r * i));
                t.Log.debug("[load]进度: current={0} total={1}", a, i), e != t.LOADVIEW_TYPE_NONE && t.EventCenter.dispatchEvent(t.LoaderEventID.LOADVIEW_PROGRESS, e, a, i, s)
            }
            refreshResourceTime(e, r, a) {
                if (a) {
                    let a = this._dicLoaderUrl.getValue(e);
                    a ? a.ctime = t.Timer.timeSinceStartup : (a = new s(e, r), this._dicLoaderUrl.add(e, a), a.updateStatus(i.LOADING))
                } else {
                    let i = this._dicLoaderUrl.getValue(e);
                    i && (i.utime = t.Timer.timeSinceStartup)
                }
            }
            clearRes(e) {
                this._dicLoaderUrl.remove(e), Laya.loader.clearRes(e);
                var i = e.lastIndexOf(".bin");
                if (i > 0) {
                    let s = e.lastIndexOf("/"),
                        r = e.substr(s + 1, i - s - 1);
                    fgui.UIPackage.removePackage(r), t.Log.info("remove Package :" + r)
                }
                t.Log.info("[res]释放资源:" + e)
            }
            cleanTexture(e) {
                this._dicLoaderUrl.foreach((i, s) => (s.group == e && (t.Log.info("清理texture资源 {0}", i), this.clearRes(i)), !0))
            }
            setAniAnim(t, e, i) {
                let s = this._aniAnimDic.getValue(t);
                null == s ? this._aniAnimDic.add(t, [e, 1, i]) : s[1] += 1
            }
            createSpineAnim(e, i, s = "default") {
                return new Promise((r, a) => {
                    let n = this._spineDic.getValue(e);
                    n ? r(n[0].buildArmature(i)) : t.DisplayUtils.createSkeletonAni(e, i).then(t => {
                        this._spineDic.add(e, [t[0], s]), r(t[1])
                    }).catch(t => {
                        a(t)
                    })
                })
            }
            removeSpineAnim(t) {
                t.offAll(), t.removeSelf(), t.destroy(), t = null
            }
            removeSpineTemplet(i) {
                let s = this._spineDic.getValue(i);
                if (null != s) {
                    for (let t in s[0].subTextureDic) {
                        let e = s[0].subTextureDic[t];
                        e.disposeBitmap(), delete s[0].subTextureDic[t], e = null
                    }
                    e.Instance.clearRes(i), this._spineDic.remove(i), s[0].destroy(), t.ArrayUtils.clear(s), s = null
                }
            }
            removeSpineTempletGroup(t) {
                this._spineDic.foreach((e, i) => (i[1] == t && this.removeSpineTemplet(e), !0))
            }
            createAniAnim(e, i, s = "default") {
                return new Promise((r, a) => {
                    t.DisplayUtils.createAsyncAnimation(e, i).then(t => {
                        this.setAniAnim(e, i, s), this.onAniResUpdateSignal.dispatch(e), r(t)
                    }).catch(t => {
                        a(t)
                    })
                })
            }
            createFrameAnim(t, i, s, r = "default") {
                return new Promise((r, a) => {
                    e.Instance.getRes(s);
                    let n = new Laya.Animation;
                    n.loadAtlas(s, Laya.Handler.create(null, e => {
                        Laya.Animation.createFrames(i, t), r(n)
                    }))
                })
            }
            createFuiAnim(t, i, s, r = "default") {
                return new Promise((a, n) => {
                    let l = s + "_atlas0.png",
                        o = s + ".bin";
                    if (null == e.Instance.getRes(l)) e.Instance.loadArrayRes([{
                        url: l,
                        type: Laya.Loader.IMAGE
                    }, {
                        url: o,
                        type: Laya.Loader.BUFFER
                    }], null, null, 0, !0, r).then(e => {
                        let s = fgui.UIPackage.createObject(t, i);
                        a(s.asCom)
                    }).catch(t => {
                        n(t)
                    });
                    else {
                        let e = fgui.UIPackage.createObject(t, i);
                        a(e.asCom)
                    }
                })
            }
            removeAniAnim(i) {
                if (null != this._aniAnimDic.getValue(i)) {
                    e.Instance.clearRes(i);
                    for (let e in Laya.Animation.framesMap)
                        if (t.StringUtils.beginsWith(e, i)) {
                            let t = Laya.Animation.framesMap[e];
                            if (delete Laya.Animation.framesMap[e], t.frames && t.frames.length > 0) {
                                let e = t.frames.length;
                                for (let i = 0; i < e; i++) {
                                    let e = t.frames.shift();
                                    e.autoDestroy = !0, e.destroy(!0), e = null
                                }
                                t.frames = null
                            }
                            t = null
                        } this._aniAnimDic.remove(i)
                }
            }
            removeAllAniAnim(e = "default") {
                this._aniAnimDic.foreach((i, s) => (s[2] == e && (t.Log.info("clean {0} {1}", i, s[0]), this.removeAniAnim(i)), !0))
            }
            static imageProxy(i, s, r, a) {
                return new Promise((n, l) => {
                    if (null != e.Instance.getRes(s)) i.url = s;
                    else {
                        let n = s;
                        null != a && (n = a), r && (i.url = r), t.Log.info("imageProxy start load {0} ", n), e.Instance.loadRes(n).then(e => {
                            i.url = s, i.alpha = .1, t.TweenUtils.get(i).to({
                                alpha: 1
                            }, .3), t.Log.info("imageProxy start load done {0} ", n)
                        }).catch(e => t.Log.error(e))
                    }
                })
            }
        }
        let i;
        e.FONT_Yuanti = "Yuanti SC Regular", e.Font_Helvetica = "Helvetica", e.FONT_DEFAULT = Laya.Text.defaultFont, e.FONT_DEFAULT_SIZE = t.FONT_SIZE_5, e.DefaultGroup = "airkit", e.SystemGroup = "system", e.instance = null, t.ResourceManager = e,
            function (t) {
                t[t.READY = 0] = "READY", t[t.LOADING = 1] = "LOADING", t[t.LOADED = 2] = "LOADED"
            }(i || (i = {}));
        class s {
            constructor(e, s) {
                this.url = e, this.group = s, this.ctime = t.Timer.timeSinceStartup, this.utime = t.Timer.timeSinceStartup, this.status = i.READY
            }
            updateStatus(t) {
                this.status = t
            }
        }
    }(airkit || (airkit = {})),
    function (t) {
        class e {
            static format(e, ...i) {
                if (null == e) return "null";
                if (t.StringUtils.isString(e)) {
                    let s = [];
                    for (let e = 0; e < i.length; e++) {
                        let r = i[e];
                        t.StringUtils.isString(r) ? s.push(r) : s.push(JSON.stringify(r, null, 4))
                    }
                    return t.StringUtils.format(e, ...s)
                }
                return "object" == typeof e && e.message ? e.message : JSON.stringify(e, null, 4)
            }
            static debug(e, ...i) {
                if (this.LEVEL < t.LogLevel.DEBUG) return;
                let s = this.format(e, ...i);
                return console.log(t.DateUtils.currentYMDHMS(), "[debug]", s), s
            }
            static info(e, ...i) {
                if (this.LEVEL < t.LogLevel.INFO) return;
                let s = this.format(e, ...i);
                return console.log(t.DateUtils.currentYMDHMS(), "[info]", s), s
            }
            static warning(e, ...i) {
                if (this.LEVEL < t.LogLevel.WARNING) return;
                let s = this.format(e, ...i);
                return console.warn(t.DateUtils.currentYMDHMS(), "[warn]", s), s
            }
            static error(e, ...i) {
                if (this.LEVEL < t.LogLevel.ERROR) return;
                let s = this.format(e, ...i);
                return console.error(t.DateUtils.currentYMDHMS(), "[error]", s), s
            }
            static exception(e, ...i) {
                if (this.LEVEL < t.LogLevel.EXCEPTION) return;
                let s = this.format(e, ...i);
                return console.exception(t.DateUtils.currentYMDHMS(), "[exce]", s), s
            }
            static dump(e) {
                if (!(this.LEVEL < t.LogLevel.INFO)) {
                    if (e instanceof Object) try {
                        e = JSON.stringify(e, null, 4)
                    } catch (t) {
                        console.error(t)
                    }
                    console.log(t.DateUtils.currentYMDHMS(), "[Dump]", e)
                }
            }
        }
        e.LEVEL = t.LogLevel.INFO, t.Log = e
    }(airkit || (airkit = {})),
    function (t) {
        t.BaseModule = class extends Laya.EventDispatcher {
            constructor() {
                super()
            }
            setup(e) {
                this.event(t.EventID.BEGIN_MODULE, this.name), this.registerEvent()
            }
            start() {}
            update(t) {}
            registerEvent() {
                this.registerSignalEvent()
            }
            unRegisterEvent() {
                this.unregisterSignalEvent()
            }
            static res() {
                return null
            }
            static loaderTips() {
                return "资源加载中"
            }
            static loaderType() {
                return t.LOADVIEW_TYPE_NONE
            }
            registerSignalEvent() {
                let t = this.signalMap();
                if (t)
                    for (let e of t) e[0].on(e[1], e[2], e.slice(3))
            }
            unregisterSignalEvent() {
                let t = this.signalMap();
                if (t)
                    for (let e of t) e[0].off(e[1], e[2])
            }
            signalMap() {
                return null
            }
            dispose() {
                this.event(t.EventID.END_MODULE, this.name), this.unRegisterEvent()
            }
        }
    }(airkit || (airkit = {})),
    function (t) {
        class e {
            static get Instance() {
                return this.instance || (this.instance = new e), this.instance
            }
            setup() {
                this.registerEvent()
            }
            static register(t, e) {
                Laya.ClassUtils.regClass(t, e)
            }
            static call(e, i, ...s) {
                return new Promise((r, a) => {
                    let n = this.modules.getValue(e);
                    if (null == n) {
                        n = Laya.ClassUtils.getInstance(e);
                        let l = Laya.ClassUtils.getClass(e);
                        null == n && (t.Log.warning("Cant find module {0}", e), a("Cant find module" + e)), this.modules.add(e, n), n.name = e, this.loadResource(n, l).then(e => {
                            var a = e => {
                                if (e.off(t.EventID.BEGIN_MODULE, null, a), e.start(), null == i) r(e);
                                else {
                                    let t = this.callFunc(e, i, s);
                                    r(t)
                                }
                            };
                            n.on(t.EventID.BEGIN_MODULE, null, a, [n]), n.setup(null)
                        }).catch(i => {
                            t.Log.warning("Load module Resource Failed {0}", e), a("Load module Resource Failed " + e)
                        })
                    } else if (null == i) r(n);
                    else {
                        let t = this.callFunc(n, i, s);
                        r(t)
                    }
                })
            }
            static callFunc(e, i, s) {
                if (null == i) return;
                var r = e[i];
                let a = null;
                return r ? a = s ? r.apply(e, s) : r.apply(e) : t.Log.error("cant find funcName {0} from Module:{1}", i, e.name), a
            }
            static loadResource(e, i) {
                let s = [],
                    r = i.res();
                if (r && r.length > 0)
                    for (let e = 0; e < r.length; ++e) {
                        let i = r[e];
                        t.ResourceManager.Instance.getRes(i[0]) || s.push({
                            url: i[0],
                            type: i[1]
                        })
                    }
                return new Promise((e, r) => {
                    if (s.length > 0) {
                        let a = i.loaderType(),
                            n = i.loaderTips();
                        t.ResourceManager.Instance.loadArrayRes(s, a, n, 1, !0, t.ResourceManager.DefaultGroup).then(t => {
                            e(t)
                        }).catch(t => {
                            r(t)
                        })
                    } else e([])
                })
            }
            destroy() {
                this.unRegisterEvent(), this.clear()
            }
            clear() {
                e.modules && (e.modules.foreach((t, e) => (e.dispose(), !0)), e.modules.clear())
            }
            update(t) {
                e.modules.foreach((e, i) => (i.update(t), !0))
            }
            registerEvent() {}
            unRegisterEvent() {}
        }
        e.modules = new t.SDictionary, e.instance = null, t.Mediator = e
    }(airkit || (airkit = {})),
    function (t) {
        let e;
        ! function (t) {
            t[t.TypeText = 0] = "TypeText", t[t.TypeJson = 1] = "TypeJson", t[t.TypePB = 2] = "TypePB"
        }(e = t.eHttpRequestType || (t.eHttpRequestType = {})), t.POST = "POST", t.GET = "GET", t.CONTENT_TYPE_TEXT = "application/x-www-form-urlencoded", t.CONTENT_TYPE_JSON = "application/json", t.CONTENT_TYPE_PB = "application/octet-stream", t.RESPONSE_TYPE_TEXT = "text", t.RESPONSE_TYPE_JSON = "json", t.RESPONSE_TYPE_XML = "xml", t.RESPONSE_TYPE_BYTE = "arraybuffer", t.HTTP_REQUEST_TIMEOUT = 1e4;
        class i {
            static request(s, r, a, n, l, o) {
                return new Promise((h, c) => {
                    i.currentRequsts > i.maxRequest && t.Log.error("reached max request {0}", i.currentRequsts), i.currentRequsts < 0 && (i.currentRequsts = 0), i.currentRequsts++, null == o && (o = "text"), r != t.POST && r != t.GET && (i.currentRequsts--, c("method error")), n || (n = []);
                    let u = "Content-Type";
                    switch (a) {
                        case e.TypeText:
                            n.push(u, t.CONTENT_TYPE_TEXT);
                            break;
                        case e.TypeJson:
                            n.push(u, t.CONTENT_TYPE_JSON);
                            break;
                        case e.TypePB:
                            n.push(u, t.CONTENT_TYPE_PB);
                            break;
                        default:
                            n.push(u, t.CONTENT_TYPE_TEXT)
                    }
                    var g = new Laya.HttpRequest;
                    g.http.timeout = t.HTTP_REQUEST_TIMEOUT, g.http.ontimeout = function () {
                        t.Log.error("request timeout {0}", s), g.offAll(), i.currentRequsts--, c("timeout")
                    }, g.once(Laya.Event.COMPLETE, this, function (e) {
                        let s;
                        switch (o) {
                            case t.RESPONSE_TYPE_TEXT:
                            case t.RESPONSE_TYPE_JSON:
                                s = g.data;
                                break;
                            case t.RESPONSE_TYPE_BYTE:
                                var r = new Laya.Byte(g.data);
                                r.endian = Laya.Socket.BIG_ENDIAN, s = r.getUint8Array(r.pos, r.length - r.pos);
                                break;
                            default:
                                s = g.data
                        }
                        g.offAll(), i.currentRequsts--, h(s)
                    }), g.once(Laya.Event.ERROR, this, function (e) {
                        t.Log.error("req:{0} error:{1}", s, e), g.offAll(), i.currentRequsts--, c(e)
                    }), g.on(Laya.Event.PROGRESS, this, function (t) {}), r == t.GET ? g.send(s, null, r, o, n) : g.send(s, l, r, o, n)
                })
            }
            static get(i, s, r, a) {
                return null == s && (s = e.TypeText), null == a && (a = t.RESPONSE_TYPE_TEXT), this.request(i, t.GET, s, r, null, a)
            }
            static post(i, s, r, a, n) {
                var l = null;
                switch (null == r && (r = e.TypeText), r) {
                    case e.TypeText:
                        s && (l = t.Utils.obj2query(s));
                        break;
                    case e.TypeJson:
                        s && (l = JSON.stringify(s));
                        break;
                    case e.TypePB:
                        s && (l = s)
                }
                return null == n && (n = t.RESPONSE_TYPE_TEXT), this.request(i, t.POST, r, a, l, n)
            }
        }
        i.currentRequsts = 0, i.maxRequest = 6, t.Http = i
    }(airkit || (airkit = {})),
    function (t) {
        class e extends fgui.GComponent {
            constructor() {
                super(), this._isOpen = !1, this._UIID = 0, this.objectData = null, this._destory = !1, this._viewID = e.__ViewIDSeq++
            }
            createPanel(t, e) {
                let i = fgui.UIPackage.createObjectFromURL("ui://" + t + "/" + e);
                null != i && (this._view = i.asCom, this._view.setSize(this.width, this.height), this._view.addRelation(this, fgui.RelationType.Width), this._view.addRelation(this, fgui.RelationType.Height), this.addChild(this._view))
            }
            debug() {}
            setup(e) {
                this._isOpen = !0, this.onLangChange(), this.onCreate(e), t.EventCenter.dispatchEvent(t.EventID.UI_OPEN, this._UIID), t.EventCenter.addEventListener(t.EventID.UI_LANG, this, this.onLangChange), this.registerEvent(), this.registeGUIEvent(), this.registerSignalEvent()
            }
            dispose() {
                this._destory || (this._destory = !0, this.onDestroy(), this.unRegisterEvent(), this.unregisteGUIEvent(), this.unregisterSignalEvent(), this._isOpen = !1, this.objectData = null, t.EventCenter.dispatchEvent(t.EventID.UI_CLOSE, this._UIID), t.EventCenter.removeEventListener(t.EventID.UI_LANG, this, this.onLangChange), super.dispose())
            }
            isDestory() {
                return this._destory
            }
            panel() {
                let t = this.getGObject("panel");
                return null != t ? t.asCom : null
            }
            bg() {
                let t = this.getGObject("bg");
                return null != t ? t.asCom : null
            }
            setVisible(t) {
                this.visible;
                this.visible = t
            }
            setUIID(t) {
                this._UIID = t
            }
            get UIID() {
                return this._UIID
            }
            get viewID() {
                return this._viewID
            }
            onCreate(t) {}
            onDestroy() {}
            update(t) {
                return !0
            }
            getGObject(t) {
                return this._view.getChild(t)
            }
            onEnter() {}
            onLangChange() {}
            static res() {
                return null
            }
            static loaderTips() {
                return "资源加载中"
            }
            static loaderType() {
                return t.LOADVIEW_TYPE_NONE
            }
            signalMap() {
                return null
            }
            eventMap() {
                return null
            }
            registerEvent() {}
            unRegisterEvent() {}
            staticCacheUI() {
                return null
            }
            loadResource(e, i) {
                return new Promise((s, r) => {
                    let a = [],
                        n = i.res();
                    if (n && n.length > 0)
                        for (let e = 0; e < n.length; ++e) {
                            let i = n[e];
                            t.ResourceManager.Instance.getRes(i[0]) || a.push({
                                url: i[0],
                                type: i[1]
                            })
                        }
                    if (a.length > 0) {
                        let n = i.loaderTips(),
                            l = i.loaderType();
                        t.ResourceManager.Instance.loadArrayRes(a, l, n, 1, !0, e).then(t => {
                            this.onAssetLoaded(), s(this), this.onEnter()
                        }).catch(e => {
                            t.Log.error(e), r(e)
                        })
                    } else this.onAssetLoaded(), s(this), this.onEnter()
                })
            }
            onAssetLoaded() {
                if (!this._isOpen) return;
                let t = this.staticCacheUI();
                if (t)
                    for (let e = 0; e < t.length; ++e) {
                        t[e].cacheAs = "bitmap"
                    }
            }
            registerSignalEvent() {
                let t = this.signalMap();
                if (t)
                    for (let e of t) {
                        e[0].on(e[1], e[2], e.slice(3))
                    }
            }
            unregisterSignalEvent() {
                let t = this.signalMap();
                if (t)
                    for (let e of t) {
                        e[0].off(e[1], e[2])
                    }
            }
            registeGUIEvent() {
                let t = this.eventMap();
                if (t)
                    for (let e of t) {
                        e[0].on(e[1], this, e[2], e.slice(3))
                    }
            }
            unregisteGUIEvent() {
                let t = this.eventMap();
                if (t)
                    for (let e of t) {
                        e[0].off(e[1], this, e[2])
                    }
            }
            doClose() {
                return !1 === this._isOpen ? (t.Log.error("连续点击"), !1) : (this._isOpen = !1, t.UIManager.Instance.close(this.UIID, t.eCloseAnim.CLOSE_CENTER), !0)
            }
        }
        e.__ViewIDSeq = 0, t.BaseView = e
    }(airkit || (airkit = {})),
    function (t) {
        t.ColorView = class extends t.BaseView {
            constructor() {
                super(), this.bgColorTweener = new Laya.Tween, this.bgColorChannels = {
                    r: 99,
                    g: 0,
                    b: 255
                }, this.gradientInterval = 5e3, this.displayObject.blendMode = "lighter"
            }
            setup(t) {
                super.setup(t), this.alpha = .3, t && t.blend && (this.displayObject.blendMode = t.blend), this.setSize(fgui.GRoot.inst.width, fgui.GRoot.inst.height), this.evalBgColor(), this.sprite = fgui.UIPackage.createObjectFromURL("ui://Game/Light").asCom, this.addChild(this.sprite), this.sprite.displayObject.blendMode = "multiply", this.sprite.setSize(this.width, this.height), this.sprite.getTransition("t1").timeScale = .3, this.sprite.alpha = .8, this.renderBg()
            }
            destroy(t) {
                this.sprite.removeFromParent(), this.sprite.dispose(), this.sprite = null, this.bgColorTweener.clear(), this.bgColorTweener = null, super.dispose()
            }
            evalBgColor() {
                var t = 16777215 * Math.random(),
                    e = this.getColorChannals(t);
                this.bgColorTweener.to(this.bgColorChannels, {
                    r: e[0],
                    g: e[1],
                    b: e[2],
                    a: .2
                }, this.gradientInterval, null, Laya.Handler.create(this, this.onTweenComplete))
            }
            getColorChannals(t) {
                var e = [];
                return e.push(t >> 16), e.push(t >> 8 & 255), e.push(255 & t), e
            }
            onTweenComplete() {
                this.evalBgColor()
            }
            debug() {
                this.displayObject.graphics.clear(), this.displayObject.graphics.drawRect(0, 0, this.width, this.height, "#f4e1e1"), this.alpha = .4
            }
            renderBg() {
                this.displayObject.graphics.clear(), this.displayObject.graphics.drawRect(0, 0, this.width, this.height, this.getHexColorString())
            }
            getHexColorString() {
                this.bgColorChannels.r = Math.floor(this.bgColorChannels.r), this.bgColorChannels.g = Math.floor(this.bgColorChannels.g), this.bgColorChannels.b = Math.floor(this.bgColorChannels.b);
                var t = this.bgColorChannels.r.toString(16);
                t = 2 == t.length ? t : "0" + t;
                var e = this.bgColorChannels.g.toString(16);
                e = 2 == e.length ? e : "0" + e;
                var i = this.bgColorChannels.b.toString(16);
                return "#" + t + e + (i = 2 == i.length ? i : "0" + i)
            }
            update(t) {
                return super.update(t), this.renderBg(), !0
            }
        }
    }(airkit || (airkit = {})),
    function (t) {
        t.RichImage = class extends t.BaseView {
            get img() {
                return null == this._img && (this._img = new fgui.GLoader, this.addChild(this._img)), this._img
            }
            debug() {
                this.displayObject.graphics.clear(), this.displayObject.graphics.drawRect(0, 0, this.width, this.height, "#00ff00")
            }
            setImage(t, e) {
                Object.assign(this.img, e);
                let i = e.fixedWidth ? e.fixedWidth : e.width;
                this.setSize(i, this.height), this.img.url = t
            }
            dispose() {
                t.DisplayUtils.removeAllChild(this), super.dispose()
            }
        }
    }(airkit || (airkit = {})),
    function (t) {
        t.RichLabel = class extends fgui.GComponent {
            get label() {
                return null == this._label && (this._label = new fgui.GBasicTextField, this.addChild(this._label)), this._label
            }
            setText(t, e) {
                Object.assign(this.label, e), this._text = t, this.label.text = t;
                let i = Laya.Browser.measureText(t, e.font + " " + e.fontSize);
                this._label.setSize(i.width, parseInt(e.fontSize)), this.setSize(this.label.width, this.height), this.label.y = (this.height - this.label.height) / 2
            }
            dispose() {
                t.DisplayUtils.removeAllChild(this), super.dispose()
            }
        }
    }(airkit || (airkit = {})),
    function (t) {
        let e;
        ! function (t) {
            t[t.RICH_UNKNOWN = 0] = "RICH_UNKNOWN", t[t.RICH_LABEL = 1] = "RICH_LABEL", t[t.RICH_IMAGE = 2] = "RICH_IMAGE", t[t.RICH_ANIM = 3] = "RICH_ANIM", t[t.RICH_BR = 4] = "RICH_BR"
        }(e = t.eRichTextType || (t.eRichTextType = {}));
        t.RichText = class extends fgui.GComponent {
            constructor() {
                super(...arguments), this.container = [], this.texts = [], this.lineHeight = 28, this.font = t.ResourceManager.FONT_DEFAULT, this.fontSize = 22, this.color = "#ffffff", this.pointAtX = 0, this.pointAtY = 0
            }
            debug() {
                this.displayObject.graphics.clear(), this.displayObject.graphics.drawRect(0, 0, this.width, this.height, "#000000")
            }
            parseHtml(t) {
                return t.match(/<(?:(?:\/?[A-Za-z]\w*\b(?:[=\s](['"]?)[\s\S]*?\1)*)|(?:!--[\s\S]*?--))\/?>([^>]*?<\/(img|p|font|anim)>)?/gi)
            }
            convertTagType(t) {
                return "p" == t || "font" == t ? e.RICH_LABEL : "img" == t ? e.RICH_IMAGE : "anim" == t ? e.RICH_ANIM : "br" == t ? e.RICH_BR : e.RICH_UNKNOWN
            }
            praseTag(t) {
                let i = {
                        tag: "",
                        type: e.RICH_UNKNOWN,
                        src: "",
                        attrs: {}
                    },
                    s = t.match(/<\/?(img|p|font|anim|br)\b([^>]*?)\/?>/);
                switch (i.tag = s[1], i.type = this.convertTagType(i.tag), i.type) {
                    case e.RICH_BR:
                        return i
                }
                let r = t.indexOf(" ") + 1,
                    a = t.indexOf(">"),
                    n = t.substr(r, a - r);
                if (n) {
                    let t = n.split(" ");
                    if (t && t.length > 0)
                        for (let e = 0; e < t.length; e++) {
                            let s = t[e].split("=");
                            s && s.length > 1 && (i.attrs[s[0]] = s[1].replace(/('|")/g, ""))
                        }
                }
                let l = ["font", "fontSize", "color"];
                for (let t = 0; t < l.length; t++) {
                    let e = l[t];
                    null == i.attrs[e] && (i.attrs[e] = this[e])
                }
                if (i.type == e.RICH_LABEL) {
                    let e = t.indexOf(">") + 1,
                        s = t.lastIndexOf("</");
                    i.src = t.substr(e, s - e)
                } else i.type == e.RICH_IMAGE && (i.src = i.attrs.src);
                return i
            }
            cleanText() {
                for (let t = this.container.length - 1; t >= 0; t--) {
                    let e = this.container[t];
                    this.removeChild(e), e.dispose()
                }
                this.container = [], this.texts = [], this.pointAtX = 0, this.pointAtY = 0
            }
            setText(t) {
                null != t && (this.cleanText(), this.appendText(t))
            }
            processSplitLine(t) {
                switch (t.type) {
                    case e.RICH_LABEL:
                        return this.processSplitLabel(t);
                    case e.RICH_BR:
                        return this.processSplitBR(t);
                    case e.RICH_IMAGE:
                        return this.processSplitImage(t)
                }
            }
            processSplitImage(t) {
                let e = parseInt(t.attrs.width);
                return t.attrs.fixedWidth && (e = parseInt(t.attrs.fixedWidth)), this.pointAtX + e <= this.width ? (t.x = this.pointAtX, t.y = this.pointAtY, this.pointAtX += e) : (this.pointAtX = e, this.pointAtY += this.lineHeight, t.x = 0, t.y = this.pointAtY), [t]
            }
            processSplitBR(t) {
                return this.pointAtX = 0, this.pointAtY += this.lineHeight, []
            }
            processSplitLabel(e) {
                let i = [],
                    s = e.attrs.fontSize + "px " + e.attrs.font,
                    r = Laya.Browser.measureText(e.src, s);
                if (this.pointAtX + r.width <= this.width) return e.x = this.pointAtX, e.y = this.pointAtY, i.push(e), this.pointAtX += r.width, i; {
                    let r = e.src,
                        l = this.pointAtX,
                        o = this.pointAtY,
                        h = 0;
                    for (var a = 0, n = r.length; a < n; a++) {
                        let n = Laya.Browser.measureText(r.charAt(a), s);
                        if (this.pointAtX + n.width > this.width) {
                            let s = t.ClassUtils.copyObject(e);
                            s.src = r.substr(h, a - h), s.x = l, s.y = o, i.push(s), this.pointAtX = n.width, this.pointAtY += this.lineHeight, l = 0, o = this.pointAtY, h = a
                        } else this.pointAtX += n.width
                    }
                    if (h <= r.length - 1) {
                        let s = t.ClassUtils.copyObject(e);
                        s.src = r.substr(h), s.x = l, s.y = o, i.push(s)
                    }
                }
                return i
            }
            addTag(i) {
                let s = this.praseTag(i),
                    r = this.processSplitLine(s);
                switch (s.type) {
                    case e.RICH_LABEL:
                        for (let e = 0; e < r.length; e++) {
                            let i = new t.RichLabel;
                            i.height = this.lineHeight, this.addChild(i);
                            let s = this.convertAttrs(r[e].attrs);
                            i.setText(r[e].src, s), i.x = r[e].x, i.y = r[e].y, this.container.push(i)
                        }
                        break;
                    case e.RICH_IMAGE:
                        for (let e = 0; e < r.length; e++) {
                            let i = new t.RichImage;
                            i.height = this.lineHeight, this.addChild(i);
                            let s = this.convertAttrs(r[e].attrs);
                            i.setImage(r[e].src, s), i.x = r[e].x, i.y = r[e].y, this.container.push(i)
                        }
                        break;
                    case e.RICH_BR:
                }
            }
            convertAttrs(t) {
                let e = ["centerX", "centerY", "width", "height", "fixedHeight"];
                for (let i = 0; i < e.length; i++) {
                    let s = e[i];
                    t[s] && (t[s] = parseFloat(t[s]))
                }
                return t
            }
            appendText(e) {
                if (this.width <= 0) return void t.Log.warning("must set RichText width first");
                let i = this.parseHtml(e);
                if (i && i.length > 0)
                    for (let t = 0; t < i.length; t++) this.addTag(i[t])
            }
        }
    }(airkit || (airkit = {})),
    function (t) {
        t.TextFormat = class {
            constructor() {}
        }
    }(airkit || (airkit = {})),
    function (t) {
        t.State = class {
            constructor(t, e) {
                this._owner = null, this._status = 0, this._times = 0, this._tick = 0, this._entity = t, this._status = e
            }
            enter() {
                t.Log.info("you must overwrite the func state.enter !")
            }
            update(e) {
                t.Log.info("you must overwrite the func state.update !")
            }
            exit() {
                t.Log.info("you must overwrite the func state.exit !")
            }
        }
    }(airkit || (airkit = {})),
    function (t) {
        t.StateMachine = class {
            constructor() {
                this._currentState = null, this._previousState = null, this._globalState = null
            }
            update(t) {
                this._globalState && this._globalState.update(t), this._currentState && this._currentState.update(t)
            }
            changeState(t) {
                this._previousState = this._currentState, this._currentState = t, this._currentState._owner = this, this._previousState && this._previousState.exit(), this._currentState.enter()
            }
            setCurrentState(t) {
                this._currentState && this._currentState.exit(), this._currentState = t, this._currentState._owner = this, this._currentState.enter()
            }
            setGlobalState(t) {
                this._globalState && this._globalState.exit(), this._globalState = t, this._globalState._owner = this, this._globalState.enter()
            }
            clearAllState() {
                this._globalState && (this._globalState.exit(), this._globalState = null), this._currentState && (this._currentState.exit(), this._currentState = null), this._previousState = null
            }
            get currentState() {
                return this._currentState
            }
            get previousState() {
                return this._previousState
            }
            get globalState() {
                return this._globalState
            }
        }
    }(airkit || (airkit = {})),
    function (t) {
        class e {
            static getSeq() {
                return e.REQ_ID++
            }
            decode(e, i) {
                let s = t.bytes2String(e, i),
                    r = JSON.parse(s);
                return r && r.payload ? (this.uid = r.uid, this.cmd = r.cmd, this.msgType = r.msgType, this.ID = r.userdata, this.data = JSON.parse(r.payload), !0) : (s = null, !1)
            }
            encode(t) {
                this.ID = e.getSeq();
                let i = {
                    uid: this.uid,
                    cmd: this.cmd,
                    msgType: this.msgType,
                    seq: this.ID,
                    userdata: this.ID,
                    payload: JSON.stringify(this.data)
                };
                return JSON.stringify(i)
            }
            getID() {
                return this.ID
            }
        }
        e.REQ_ID = 1, t.JSONMsg = e;
        t.PBMsg = class {
            constructor() {
                this.receiveByte = new Laya.Byte, this.receiveByte.endian = Laya.Byte.LITTLE_ENDIAN
            }
            getID() {
                return this.ID
            }
            decode(t, e) {
                this.receiveByte.clear(), this.receiveByte.writeArrayBuffer(t), this.receiveByte.pos = 0;
                var i = this.receiveByte.getInt16();
                return this.receiveByte.getInt16(), this.receiveByte.bytesAvailable >= i && ((new Laya.Byte).writeArrayBuffer(this.receiveByte, 4, i), !0)
            }
            encode(t) {
                let e = new Laya.Byte;
                return e.endian = Laya.Byte.LITTLE_ENDIAN, e.pos = 0, e
            }
        }
    }(airkit || (airkit = {})),
    function (t) {
        class e {}
        let i;
        e.SOCKET_CONNECT = "1", e.SOCKET_RECONNECT = "2", e.SOCKET_START_RECONNECT = "3", e.SOCKET_CLOSE = "4", e.SOCKET_NOCONNECT = "5", e.SOCKET_DATA = "6", t.SocketStatus = e,
            function (t) {
                t[t.MTRequest = 1] = "MTRequest", t[t.MTResponse = 2] = "MTResponse", t[t.MTNotify = 3] = "MTNotify", t[t.MTBroadcast = 4] = "MTBroadcast"
            }(i = t.eSocketMsgType || (t.eSocketMsgType = {}));
        t.WebSocket = class extends Laya.EventDispatcher {
            constructor() {
                super(), this.mSocket = null, this._needReconnect = !1, this._maxReconnectCount = 10, this._reconnectCount = 0, this._requestTimeout = 1e4
            }
            initServer(e, i, s, r = Laya.Byte.BIG_ENDIAN) {
                this.mHost = e, this.mPort = i, this.mEndian = r, this._handers = new t.NDictionary, this._clsName = "message", Laya.ClassUtils.regClass(this._clsName, s), this.connect()
            }
            connect() {
                this.mSocket = new Laya.Socket, this.mSocket.endian = this.mEndian, this.addEvents(), this.mSocket.connect(this.mHost, this.mPort)
            }
            addEvents() {
                this.mSocket.on(Laya.Event.OPEN, this, this.onSocketOpen), this.mSocket.on(Laya.Event.MESSAGE, this, this.onReceiveMessage), this.mSocket.on(Laya.Event.CLOSE, this, this.onSocketClose), this.mSocket.on(Laya.Event.ERROR, this, this.onSocketError)
            }
            removeEvents() {
                this.mSocket.off(Laya.Event.OPEN, this, this.onSocketOpen), this.mSocket.off(Laya.Event.MESSAGE, this, this.onReceiveMessage), this.mSocket.off(Laya.Event.CLOSE, this, this.onSocketClose), this.mSocket.off(Laya.Event.ERROR, this, this.onSocketError)
            }
            onSocketOpen(t = null) {
                this._reconnectCount = 0, this._isConnecting = !0, this._connectFlag && this._needReconnect ? this.event(e.SOCKET_RECONNECT) : this.event(e.SOCKET_CONNECT), this._connectFlag = !0
            }
            onSocketClose(t = null) {
                this._isConnecting = !1, this._needReconnect ? (this.event(e.SOCKET_START_RECONNECT), this.reconnect()) : this.event(e.SOCKET_CLOSE)
            }
            onSocketError(t = null) {
                this._needReconnect ? this.reconnect() : this.event(e.SOCKET_NOCONNECT), this._isConnecting = !1
            }
            reconnect() {
                this.closeCurrentSocket(), this._reconnectCount++, this._reconnectCount < this._maxReconnectCount ? this.connect() : this._reconnectCount = 0
            }
            onReceiveMessage(i = null) {
                let s = new(Laya.ClassUtils.getClass(this._clsName));
                if (!s.decode(i, this.mEndian)) return void t.Log.error("decode msg faild {0}", i);
                let r = this._handers.getValue(s.getID());
                r ? r(s) : this.event(e.SOCKET_DATA, s)
            }
            request(e) {
                return new Promise((i, s) => {
                    var r = e.encode(this.mEndian);
                    let a = e.getID();
                    if (r) {
                        let e = t.TimerManager.Instance.addOnce(this._requestTimeout, null, () => {
                            this._handers.remove(a), s("timeout")
                        });
                        this._handers.add(a, s => {
                            t.TimerManager.Instance.removeTimer(e), i(s)
                        }), t.Log.info("start request ws {0}", r), this.mSocket.send(r)
                    }
                })
            }
            close() {
                this._connectFlag = !1, this._handers.clear(), this.closeCurrentSocket()
            }
            closeCurrentSocket() {
                this.removeEvents(), this.mSocket.close(), this.mSocket = null, this._isConnecting = !1
            }
            isConnecting() {
                return this._isConnecting
            }
        }
    }(airkit || (airkit = {})),
    function (t) {
        class e extends fgui.GComponent {
            constructor() {
                super()
            }
            debug() {}
        }
        t.Layer = e;
        class i extends t.Singleton {
            static get stage() {
                return this._root
            }
            static getLayer(e) {
                let i = null;
                switch (e) {
                    case t.eUILayer.BG:
                        i = this.bgLayer;
                        break;
                    case t.eUILayer.MAIN:
                        i = this.mainLayer;
                        break;
                    case t.eUILayer.GUI:
                        i = this.uiLayer;
                        break;
                    case t.eUILayer.POPUP:
                        i = this.popupLayer;
                        break;
                    case t.eUILayer.TOOLTIP:
                        i = this.tooltipLayer;
                        break;
                    case t.eUILayer.SYSTEM:
                        i = this.systemLayer;
                        break;
                    case t.eUILayer.LOADING:
                        i = this.loadingLayer;
                        break;
                    case t.eUILayer.TOP:
                        i = this.topLayer
                }
                return displayWidth() == i.width && displayHeight() == i.height || (i.width = displayWidth(), i.height = displayHeight()), i
            }
            static setup(t) {
                this._root = t, this._bgLayer = new e, this._bgLayer.displayObject.name = "bgLayer", this._bgLayer.touchable = !0, this._root.addChild(this._bgLayer), this._bgLayer.sortingOrder = 0, this._mainLayer = new e, this._mainLayer.displayObject.name = "mainLayer", this._mainLayer.touchable = !0, this._root.addChild(this._mainLayer), this._mainLayer.sortingOrder = 2, this._tooltipLayer = new e, this._tooltipLayer.displayObject.name = "tooltipLayer", this._tooltipLayer.touchable = !1, this._root.addChild(this._tooltipLayer), this._tooltipLayer.sortingOrder = 3, this._uiLayer = new e, this._uiLayer.displayObject.name = "uiLayer", this._uiLayer.touchable = !0, this._root.addChild(this._uiLayer), this._uiLayer.sortingOrder = 4, this._popupLayer = new e, this._popupLayer.displayObject.name = "popupLayer", this._popupLayer.touchable = !0, this._root.addChild(this._popupLayer), this._popupLayer.sortingOrder = 5, this._systemLayer = new e, this._systemLayer.displayObject.name = "systemLayer", this._systemLayer.touchable = !0, this._root.addChild(this._systemLayer), this._systemLayer.sortingOrder = 6, this._loadingLayer = new e, this._loadingLayer.displayObject.name = "loadingLayer", this._loadingLayer.touchable = !0, this._root.addChild(this._loadingLayer), this._loadingLayer.sortingOrder = 1001, this._topLayer = new e, this._topLayer.displayObject.name = "topLayer", this._topLayer.touchable = !0, this._root.addChild(this._topLayer), this._topLayer.sortingOrder = 1002, this.layers = [this._bgLayer, this._mainLayer, this._uiLayer, this._popupLayer, this._tooltipLayer, this._systemLayer, this._loadingLayer, this._topLayer], this.registerEvent(), this.resize(null)
            }
            static registerEvent() {
                Laya.stage.on(Laya.Event.RESIZE, this, this.resize)
            }
            static unRegisterEvent() {
                Laya.stage.off(Laya.Event.RESIZE, this, this.resize)
            }
            static resize(e) {
                var s, r;
                t.Log.info("LayerManager Receive Resize {0} {1}", displayWidth(), displayHeight());
                let a = displayWidth(),
                    n = displayHeight();
                for (fgui.GRoot.inst.setSize(a, n), s = 0, r = this.layers.length; s < r; s++) this.layers[s].setSize(a, n);
                if (this._bgLayer.numChildren) {
                    var l = this._bgLayer.getChildAt(0);
                    let t = a - i.BG_WIDTH >> 1,
                        e = n - i.BG_HEIGHT;
                    l.setXY(t, e)
                }
                fgui.GRoot.inst.setSize(a, n);
                let o = [this._uiLayer, this._popupLayer, this._systemLayer, this._topLayer, this._loadingLayer];
                for (let t = 0; t < o.length; t++) {
                    let e = o[t];
                    for (let t = 0, i = e.numChildren; t < i; t++) {
                        e.getChildAt(t).setSize(a, n)
                    }
                }
            }
            static destroy() {
                i.removeAll(), t.DisplayUtils.removeAllChild(this._topLayer), t.DisplayUtils.removeAllChild(this._root), this._topLayer = null, this._loadingLayer = null, this._systemLayer = null, this._tooltipLayer = null, this._popupLayer = null, this._uiLayer = null, this._mainLayer = null, this._bgLayer = null
            }
            static removeAll() {
                t.DisplayUtils.removeAllChild(this._bgLayer), t.DisplayUtils.removeAllChild(this._mainLayer), t.DisplayUtils.removeAllChild(this._uiLayer), t.DisplayUtils.removeAllChild(this._popupLayer), t.DisplayUtils.removeAllChild(this._tooltipLayer), t.DisplayUtils.removeAllChild(this._systemLayer), t.DisplayUtils.removeAllChild(this._loadingLayer)
            }
            static get root() {
                return this._root
            }
            static get bgLayer() {
                return this._bgLayer
            }
            static addBg(t) {
                var e;
                return this.bgLayer.numChildren ? e = this.bgLayer.getChildAt(0) : ((e = new fgui.GLoader).width = i.BG_WIDTH, e.height = i.BG_HEIGHT, e.x = displayWidth() - i.BG_WIDTH >> 1, e.y = displayHeight() - i.BG_HEIGHT, this.bgLayer.addChild(e)), e.url = t, e
            }
            static get mainLayer() {
                return this._mainLayer
            }
            static get uiLayer() {
                return this._uiLayer
            }
            static get popupLayer() {
                return this._popupLayer
            }
            static get tooltipLayer() {
                return this._tooltipLayer
            }
            static get systemLayer() {
                return this._systemLayer
            }
            static get loadingLayer() {
                return this._loadingLayer
            }
            static get topLayer() {
                return this._topLayer
            }
        }
        i.BG_WIDTH = 750, i.BG_HEIGHT = 1650, t.LayerManager = i
    }(airkit || (airkit = {})),
    function (t) {
        t.PopupView = class extends t.BaseView {
            constructor() {
                super(), this.bgTouch = !0
            }
            update(t) {
                return super.update(t)
            }
            setup(t) {
                super.setup(t), this.setSize(fgui.GRoot.inst.width, fgui.GRoot.inst.height)
            }
            onEnter() {
                super.onEnter(), this.createPanel(this.pkgName, this.resName);
                let e = this.panel();
                e && (t.DisplayUtils.popup(e, Laya.Handler.create(this, this.onOpen)), this.closeBtn = this.closeButton(), this.closeBtn && (this.closeBtn.visible = !1)), t.TimerManager.Instance.addOnce(250, this, this.setupTouchClose)
            }
            onOpen() {}
            closeButton() {
                let t = this.panel().getChild("closeBtn");
                return null != t ? t.asButton : null
            }
            setupTouchClose() {
                let t = this.bg();
                t && this.bgTouch && (t.touchable = !0, t.onClick(this, this.onClose)), this.closeBtn && (this.closeBtn.visible = !0, this.closeBtn.onClick(this, this.pressClose))
            }
            pressClose() {
                this.closeBtn && t.TweenUtils.scale(this.closeBtn), this.onClose()
            }
            onClose() {
                this.doClose()
            }
            dispose() {
                super.dispose(), null != this.callback && this.callback()
            }
            loadResource(t, e) {
                return super.loadResource(t, e)
            }
        }
    }(airkit || (airkit = {})),
    function (t) {
        class e {
            static registerScene(t, i, s) {
                e.scenes.add(t, i), Laya.ClassUtils.regClass(i, s)
            }
            static get Instance() {
                return this.instance || (this.instance = new e), this.instance
            }
            setup() {
                this.registerEvent()
            }
            destroy() {
                this.unRegisterEvent()
            }
            update(t) {
                this._curScene && this._curScene.update(t)
            }
            registerEvent() {
                t.EventCenter.addEventListener(t.EventID.CHANGE_SCENE, this, this.onChangeScene), Laya.stage.on(Laya.Event.RESIZE, this, this.resize)
            }
            unRegisterEvent() {
                t.EventCenter.removeEventListener(t.EventID.CHANGE_SCENE, this, this.onChangeScene), Laya.stage.off(Laya.Event.RESIZE, this, this.resize)
            }
            resize(e) {
                if (t.Log.info("SceneManager Receive Resize {0} {1}", displayWidth(), displayHeight()), this._curScene) {
                    this._curScene.setSize(fgui.GRoot.inst.width, fgui.GRoot.inst.height);
                    var i = this._curScene.resize;
                    let t = null;
                    i && (t = i.apply(this._curScene))
                }
            }
            onChangeScene(t) {
                let e = t.get(0);
                this.gotoScene(e)
            }
            onComplete(t) {
                this._curScene = t
            }
            gotoScene(i, s) {
                this.exitScene();
                let r = e.scenes.getValue(i),
                    a = Laya.ClassUtils.getClass(r),
                    n = new a;
                n.setSize(fgui.GRoot.inst.width, fgui.GRoot.inst.height), n.setup(s), n.loadResource(t.ResourceManager.DefaultGroup, a).then(t => {
                    this.onComplete(t)
                }).catch(e => {
                    t.Log.error(e)
                }), t.LayerManager.mainLayer.addChild(n)
            }
            exitScene() {
                this._curScene && (this._curScene.removeFromParent(), this._curScene.dispose(), this._curScene = null, t.UIManager.Instance.closeAll(), t.ResourceManager.Instance.removeAllAniAnim(), t.ObjectPools.clearAll(), t.ResourceManager.Instance.cleanTexture(t.ResourceManager.DefaultGroup), t.ResourceManager.Instance.removeAllAniAnim("default"), t.ResourceManager.Instance.removeSpineTempletGroup("default"), Laya.Scene.gc())
            }
        }
        e.scenes = new t.NDictionary, e.instance = null, t.SceneManager = e
    }(airkit || (airkit = {})),
    function (t) {
        class e extends t.Singleton {
            constructor() {
                super(), this._dicConfig = null, this._dicUIView = null, this._UIQueues = null, this._dicConfig = new t.NDictionary, this._dicUIView = new t.NDictionary, this._UIQueues = new t.NDictionary, this._UIQueues.add(t.eUIQueueType.POPUP, new i), this._UIQueues.add(t.eUIQueueType.ALERT, new i)
            }
            static get Instance() {
                return this.instance || (this.instance = new e), this.instance
            }
            empty() {
                return !!this._UIQueues.getValue(t.eUIQueueType.POPUP).empty() && !(this._dicUIView.length > 0)
            }
            show(e, ...i) {
                return new Promise((s, r) => {
                    t.Log.info("show panel {0}", e);
                    let a = this._dicUIView.getValue(e);
                    if (null != a) {
                        if (null != a.displayObject) return a.setVisible(!0), void s(a);
                        this._dicUIView.remove(e), a = null
                    }
                    let n = this._dicConfig.getValue(e);
                    t.assert(null != n, "UIManager::Show - not find id:" + n.mID);
                    let l = i.slice(0),
                        o = Laya.ClassUtils.getClass(n.name),
                        h = new o;
                    t.assert(null != h, "UIManager::Show - cannot create ui:" + e), h.setUIID(e), h.setup(l), h.loadResource(t.ResourceManager.DefaultGroup, o).then(i => {
                        t.LayerManager.getLayer(n.mLayer).addChild(i), this._dicUIView.add(e, i), s(i)
                    }).catch(e => {
                        t.Log.error(e)
                    })
                })
            }
            close(e, i = 0) {
                return new Promise((s, r) => {
                    t.Log.info("close panel {0}", e);
                    let a = this._dicConfig.getValue(e);
                    t.assert(null != a, "UIManager::Close - not find id:" + a.mID);
                    let n = this._dicUIView.getValue(e);
                    if (n)
                        if (0 == i) {
                            let t = this.clearPanel(e, n, a);
                            s([e, t])
                        } else t.DisplayUtils.hide(n, Laya.Handler.create(null, t => {
                            let i = this.clearPanel(e, n, a);
                            s([e, i])
                        }))
                })
            }
            clearPanel(e, i, s) {
                return s.mHideDestroy ? (this._dicUIView.remove(e), t.Log.info("clear panel {0}", e), i.removeFromParent(), i.dispose(), !0) : (i.setVisible(!1), !1)
            }
            closeAll(i = null) {
                this._dicUIView.foreach(function (s, r) {
                    return !(!i || !t.ArrayUtils.containsValue(i, s)) || (e.Instance.close(s), !0)
                })
            }
            popup(e, ...i) {
                this._UIQueues.getValue(t.eUIQueueType.POPUP).show(e, i)
            }
            alert(e, ...i) {
                this._UIQueues.getValue(t.eUIQueueType.ALERT).show(e, i)
            }
            findPanel(t) {
                return this._dicUIView.getValue(t)
            }
            isPanelOpen(t) {
                return !!this._dicUIView.getValue(t)
            }
            tipsPopup(e, i, s, r = .5, a = null, n = null, l = !0) {
                return new Promise((a, n) => {
                    e.addChild(s), s.setScale(.1, .1);
                    let l = i.localToGlobal(i.width / 2 - i.pivotX * i.width, .382 * i.height - i.pivotY * i.height),
                        o = e.globalToLocal(l.x, l.y),
                        h = 0,
                        c = 600,
                        u = fgui.EaseType.BounceOut;
                    r > 1.5 ? (h = e.height + 600, c = -600, u = fgui.EaseType.QuadOut, s.setXY(o.x, h)) : s.setXY(o.x, h - 200), t.TweenUtils.get(s).delay(1.5).to({
                        scaleX: 1,
                        scaleY: 1,
                        alpha: 1,
                        x: o.x,
                        y: o.y
                    }, r, u).delay(.5).to({
                        x: o.x,
                        y: h - c
                    }, r, fgui.EaseType.ExpoOut, Laya.Handler.create(null, () => {
                        s.removeFromParent(), a()
                    }))
                })
            }
            singleToast(e, i, s, r = .5, a, n = !0, l = null, o = null) {
                return new Promise((a, h) => {
                    let c = "_single_toast";
                    null == i[c] && (i[c] = []);
                    let u = fgui.EaseType.QuadOut,
                        g = fgui.EaseType.QuadIn;
                    e.addChild(s);
                    let d = t.ClassUtils.classKey(s);
                    for (var p in i[c]) {
                        let e = i[c][p];
                        e && (e.toY -= e.height + 5, t.ClassUtils.classKey(e) == d && (e.visible = !1))
                    }
                    i[c].push(s), s.visible = !0, s.setScale(.1, .1), null == l && (l = i.width / 2 - i.pivotX * i.width), null == o && (o = .382 * i.height - i.pivotY * i.height);
                    let _ = i.localToGlobal(l, o),
                        f = e.globalToLocal(_.x, _.y);
                    s.setXY(f.x, f.y), s.toY = s.y;
                    let y = t.TweenUtils.get(s);
                    y.setOnUpdate(t => {
                        let e = s.toY;
                        if (e < s.y) {
                            let t = .4 * (e - s.y),
                                i = -5 - Math.ceil(s.height / 50);
                            t < i && (t = i), s.y += t
                        }
                    });
                    y.to({
                        scaleX: 1,
                        scaleY: 1,
                        alpha: 1
                    }, r, u).to({
                        alpha: .4
                    }, .7 * r, g, Laya.Handler.create(this, () => {
                        i[c].splice(i[c].indexOf(s), 1), i && s && s.parent && (s.removeFromParent(), y.clear()), n ? t.ObjectPools.recover(s) : s.dispose(), a()
                    }))
                })
            }
            toast(e, i, s, r = .5, a, n = !0, l = null, o = null) {
                return new Promise((h, c) => {
                    null == i._toastList && (i._toastList = []);
                    let u = fgui.EaseType.QuadOut,
                        g = fgui.EaseType.QuadIn;
                    if (e.addChild(s), a) {
                        for (var d in i._toastList) i._toastList[d] && (i._toastList[d].toY -= i._toastList[d].height + 8, i._toastList[d].visible = !1);
                        r = r, u = fgui.EaseType.BounceOut, g = fgui.EaseType.BounceIn
                    } else
                        for (var d in i._toastList) i._toastList[d] && (i._toastList[d].toY -= i._toastList[d].height + 8);
                    i._toastList.push(s), s.setScale(.1, .1), null == l && (l = i.width / 2 - i.pivotX * i.width), null == o && (o = .382 * i.height - i.pivotY * i.height);
                    let p = i.localToGlobal(l, o),
                        _ = e.globalToLocal(p.x, p.y);
                    s.setXY(_.x, _.y), s.toY = s.y;
                    let f = t.TweenUtils.get(s);
                    f.setOnUpdate(t => {
                        let e = s.toY;
                        if (e < s.y) {
                            let t = .4 * (e - s.y),
                                i = -8 - Math.ceil(s.height / 50);
                            t < i && (t = i), s.y += t
                        }
                    });
                    f.to({
                        scaleX: 1,
                        scaleY: 1,
                        alpha: 1
                    }, r, u).to({
                        alpha: .4
                    }, .7 * r, g, Laya.Handler.create(this, () => {
                        i._toastList.splice(i._toastList.indexOf(s), 1), i && s && s.parent && (s.removeFromParent(), f.clear()), n ? t.ObjectPools.recover(s) : s.dispose(), h()
                    }))
                })
            }
            setup() {}
            destroy() {
                this.closeAll(), this.clearUIConfig()
            }
            update(t) {
                this._dicUIView.foreach(function (e, i) {
                    return i.update(t), !0
                })
            }
            addUIConfig(e) {
                this._dicConfig.containsKey(e.mID) ? t.Log.error("UIManager::Push UIConfig - same id is register:" + e.mID) : (this._dicConfig.add(e.mID, e), Laya.ClassUtils.regClass(e.name, e.cls))
            }
            clearUIConfig() {
                this._dicConfig.clear()
            }
            getUIConfig(t) {
                return this._dicConfig.getValue(t)
            }
            getUILayerID(t) {
                let e = this._dicConfig.getValue(t);
                return e ? e.mLayer : -1
            }
        }
        e.instance = null, t.UIManager = e;
        t.AlertInfo = class {
            constructor(t, e = "", i, s = "", r = {}, a = null) {
                this.title = "", this.tips = "", this.buttons = [], this.param = null, this.callback = t, this.title = e, this.content = i, this.tips = s, this.buttons = r, this.param = a
            }
        };
        t.UIConfig = class {
            constructor(t, e, i, s, r, a) {
                this.mID = t, this.name = e, this.cls = i, this.mLayer = s, this.mHideDestroy = r, this.mAlige = a
            }
        };
        class i {
            constructor() {
                this._currentUI = 0, this._currentUI = 0, this._listPanels = new t.Queue
            }
            show(t, e) {
                let i = [t, e];
                this._listPanels.enqueue(i), this.checkAlertNext()
            }
            empty() {
                return !(this._currentUI > 0 || this._listPanels.length > 0)
            }
            checkAlertNext() {
                if (this._currentUI > 0 || this._listPanels.length <= 0) return;
                let t = this._listPanels.dequeue();
                this.registerEvent(), this._currentUI = t[0], e.Instance.show(t[0], ...t[1])
            }
            registerEvent() {
                t.EventCenter.addEventListener(t.EventID.UI_CLOSE, this, this.onUIEvent)
            }
            unRegisterEvent() {
                t.EventCenter.removeEventListener(t.EventID.UI_CLOSE, this, this.onUIEvent)
            }
            onUIEvent(e) {
                switch (e.type) {
                    case t.EventID.UI_CLOSE:
                        let i = e.get(0);
                        this._currentUI > 0 && this._currentUI == i && (this._currentUI = 0, this.unRegisterEvent(), this.checkAlertNext())
                }
            }
        }
    }(airkit || (airkit = {})),
    function (t) {
        class e {
            static setGlobalKey(t) {
                this._globalKey = t
            }
            static has(t) {
                return null != Laya.LocalStorage.getItem(this.getFullKey(t))
            }
            static getInt(t) {
                return parseInt(Laya.LocalStorage.getItem(this.getFullKey(t)))
            }
            static setInt(t, e) {
                Laya.LocalStorage.setItem(this.getFullKey(t), e.toString())
            }
            static getFloat(t) {
                return parseInt(Laya.LocalStorage.getItem(this.getFullKey(t)))
            }
            static setFloat(t, e) {
                Laya.LocalStorage.setItem(this.getFullKey(t), e.toString())
            }
            static getString(t) {
                return Laya.LocalStorage.getItem(this.getFullKey(t))
            }
            static setString(t, e) {
                Laya.LocalStorage.setItem(this.getFullKey(t), e)
            }
            static remove(t) {
                Laya.LocalStorage.removeItem(this.getFullKey(t))
            }
            static clear() {
                Laya.LocalStorage.clear()
            }
            static getFullKey(t) {
                return this._globalKey + "_" + t
            }
        }
        e._globalKey = "", t.LocalDB = e
    }(airkit || (airkit = {})),
    function (t) {
        t.IntervalTimer = class {
            constructor() {
                this._nowTime = 0
            }
            init(t, e) {
                this._intervalTime = t, e && (this._nowTime = this._intervalTime)
            }
            reset() {
                this._nowTime = 0
            }
            update(t) {
                return this._nowTime += t, this._nowTime >= this._intervalTime && (this._nowTime -= this._intervalTime, !0)
            }
        }
    }(airkit || (airkit = {})),
    function (t) {
        class e {
            static Start() {
                this._startTime = Laya.timer.currTimer
            }
            static get deltaTimeMS() {
                return Laya.timer.delta
            }
            static get fixedDeltaTime() {
                return 0
            }
            static get time() {
                return Laya.timer.currTimer
            }
            static get timeSinceStartup() {
                return Laya.timer.currTimer - this._startTime
            }
            static get frameCount() {
                return Laya.timer.currFrame
            }
            static get timeScale() {
                return Laya.timer.scale
            }
            static set timeScale(t) {
                Laya.timer.scale = t
            }
        }
        e._startTime = 0, t.Timer = e
    }(airkit || (airkit = {})),
    function (t) {
        class e extends t.Singleton {
            constructor() {
                super(...arguments), this._idCounter = 0, this._removalPending = [], this._timers = []
            }
            static get Instance() {
                return this.instance || (this.instance = new e), this.instance
            }
            setup() {
                this._idCounter = 0
            }
            destroy() {
                t.ArrayUtils.clear(this._removalPending), t.ArrayUtils.clear(this._timers)
            }
            update(t) {
                this.remove();
                for (let i = 0; i < this._timers.length; i++) this._timers[i].update(t), 0 == this._timers[i].isActive && e.Instance.removeTimer(this._timers[i].id)
            }
            addLoop(e, s, r, a, n = null) {
                s <= 0 && (s = 0);
                let l = t.ObjectPools.get(i);
                ++this._idCounter, null != n && t.ArrayUtils.insert(n, this._idCounter, 0);
                let o = Laya.Handler.create(r, a, n, !1);
                return l.set(this._idCounter, e, s, o), this._timers.push(l), l.id
            }
            addOnce(e, s, r, a = null) {
                let n = t.ObjectPools.get(i);
                ++this._idCounter, null != a && t.ArrayUtils.insert(a, this._idCounter, 0);
                let l = Laya.Handler.create(s, r, a, !1);
                return n.set(this._idCounter, e, 1, l), this._timers.push(n), n.id
            }
            removeTimer(t) {
                this._removalPending.push(t)
            }
            remove() {
                let e;
                if (this._removalPending.length > 0) {
                    for (let i of this._removalPending)
                        for (let s = 0; s < this._timers.length; s++)
                            if ((e = this._timers[s]).id == i) {
                                e.clear(), t.ObjectPools.recover(e), this._timers.splice(s, 1);
                                break
                            } t.ArrayUtils.clear(this._removalPending)
                }
            }
        }
        e.TIMER_OBJECT = "timerObject", e.instance = null, t.TimerManager = e;
        class i {
            constructor() {
                this.mTime = new t.IntervalTimer
            }
            init() {}
            clear() {
                null != this.handle && (this.handle.recover(), this.handle = null)
            }
            set(t, e, i, s) {
                this.id = t, this.mRate = e < 0 ? 0 : e, this.mTicks = i < 0 ? 0 : i, this.handle = s, this.mTicksElapsed = 0, this.isActive = !0, this.mTime.init(this.mRate, !1)
            }
            update(e) {
                this.isActive && this.mTime.update(t.Timer.deltaTimeMS) && (null != this.handle && this.handle.run(), this.mTicksElapsed++, this.mTicks > 0 && this.mTicks == this.mTicksElapsed && (this.isActive = !1))
            }
        }
        i.objectKey = "TimerObject", t.TimerObject = i
    }(airkit || (airkit = {})),
    function (t) {
        let e;
        ! function (t) {
            t[t.ASCENDING = 0] = "ASCENDING", t[t.DESCENDING = 1] = "DESCENDING"
        }(e = t.eArraySortOrder || (t.eArraySortOrder = {}));
        t.ArrayUtils = class {
            static insert(t, e, i) {
                i > t.length - 1 ? t.push(e) : t.splice(i, 0, e)
            }
            static isArray(t) {
                return "[object Array]" === Object.prototype.toString.call(t)
            }
            static equip(t, e) {
                if (!t || !e) return !1;
                if (t.length != e.length) return !1;
                for (var i = 0, s = t.length; i < s; i++)
                    if (t[i] instanceof Array && e[i] instanceof Array) {
                        if (!t[i].equals(e[i])) return !1
                    } else if (t[i] != e[i]) return !1;
                return !0
            }
            static removeValue(t, e) {
                if (Array.isArray(e))
                    for (let i = t.length - 1; i >= 0; i--) this.equip(t[i], e) && t.splice(i, 1);
                else {
                    let i = t.indexOf(e); - 1 != i && t.splice(i, 1)
                }
            }
            static removeAllValue(t, e) {
                let i = t.indexOf(e);
                for (; i >= 0;) t.splice(i, 1), i = t.indexOf(e)
            }
            static containsValue(t, e) {
                return t.length > 0 && -1 != t.indexOf(e)
            }
            static copy(t) {
                return JSON.parse(JSON.stringify(t))
            }
            static sort(t, i, s = e.DESCENDING) {
                null != t && t.sort(function (t, r) {
                    switch (s) {
                        case e.ASCENDING:
                            return t[i] < r[i] ? -1 : t[i] > r[i] ? 1 : 0;
                        case e.DESCENDING:
                            return t[i] > r[i] ? -1 : t[i] < r[i] ? 1 : 0
                    }
                })
            }
            static clear(t) {
                let e = 0,
                    i = t.length;
                for (e = 0; e < i; ++e) t[e] = null;
                t.splice(0)
            }
            static isEmpty(t) {
                return null == t || 0 == t.length
            }
        }
    }(airkit || (airkit = {})),
    function (t) {
        function e(t, e) {
            var i = new Laya.Byte(t);
            return i.endian = e, i.getUint8Array(i.pos, i.length - i.pos)
        }

        function i(t) {
            for (var e = "", i = 0; i < t.length; i++) e += String.fromCharCode(t[i]);
            return e
        }
        t.bytes2Uint8Array = e, t.bytes2String = function (t, s) {
            return i(e(t, s))
        }, t.string2ArrayBuffer = function (t) {
            for (var e = new ArrayBuffer(t.length), i = new Uint8Array(e), s = 0; s < t.length; ++s) i[s] = t.charCodeAt(s);
            return e
        }, t.string2Uint8Array = function (t) {
            for (var e = [], i = 0, s = t.length; i < s; ++i) e.push(t.charCodeAt(i));
            return new Uint8Array(e)
        }, t.uint8Array2String = i
    }(airkit || (airkit = {})),
    function (t) {
        t.ClassUtils = class {
            static copyObject(t) {
                let e = JSON.stringify(t);
                return JSON.parse(e)
            }
            static getObjectValue(t, e, i) {
                return t[e] ? t[e] : i
            }
            static callFunc(e, i, s = null) {
                if (null == i) return;
                var r = e[i];
                let a = null;
                return r ? a = null == s ? r.apply(e) : r.apply(e, s) : t.Log.error("cant find funcName {0} from Module:{1}", i, e.name), a
            }
            static classKey(t) {
                return Object.getPrototypeOf(t).constructor.objectKey
            }
        }
    }(airkit || (airkit = {})),
    function (t) {
        class e {
            static setServerTime(t) {
                this.serverTime = t, this.serverTimeDiff = Date.now() - t
            }
            static getNow() {
                return Math.floor((Date.now() - this.serverTimeDiff) / 1e3)
            }
            static getNowMS() {
                return Date.now() - this.serverTimeDiff
            }
            static isTheSameMonth(t, i) {
                let s = e.getNow(),
                    r = new Date(1e3 * (s - i)),
                    a = new Date(r.getFullYear(), r.getMonth(), 1);
                return t >= Math.floor(a.getTime() / 1e3) + i
            }
            static isTheSameDayByNow(t, i) {
                let s = 60 * (new Date).getTimezoneOffset(),
                    r = (t - s - i) / 86400,
                    a = (e.getNow() - s - i) / 86400;
                return Math.floor(r) === Math.floor(a)
            }
            static passedDays(t, e, i = 0) {
                let s = 60 * (new Date).getTimezoneOffset(),
                    r = (t - s - i) / 86400,
                    a = (e - s - i) / 86400;
                return Math.floor(a) - Math.floor(r)
            }
            static currentYMDHMS() {
                return this.formatDateTime(this.getNowMS())
            }
            static currentHour() {
                return new Date(this.getNowMS()).getHours()
            }
            static formatDateTime(t) {
                var e = new Date(t),
                    i = e.getFullYear(),
                    s = e.getMonth() + 1,
                    r = s < 10 ? "0" + s : s,
                    a = e.getDate(),
                    n = a < 10 ? "0" + a : a,
                    l = e.getHours(),
                    o = l < 10 ? "0" + l : l,
                    h = e.getMinutes(),
                    c = e.getSeconds();
                return i + "-" + r + "-" + n + " " + o + ":" + (h < 10 ? "0" + h : h) + ":" + (c < 10 ? "0" + c : c)
            }
            static countdown(t, e = "D天H时M分S秒") {
                let i = Math.max(0, t / 1e3),
                    s = Math.floor(i / 24 / 3600),
                    r = Math.floor(i / 3600 % 24),
                    a = Math.floor(i / 60 % 60);
                i = Math.floor(i % 60);
                let n = e.replace(/D/, s.toString());
                return n = (n = (n = n.replace(/H/, r.toString())).replace(/M/, a.toString())).replace(/S/, i.toString())
            }
            static formatTime(e, i = "{0}:{1}:{2}") {
                let s = Math.max(0, e),
                    r = Math.floor(s / 3600 % 24),
                    a = Math.floor(s / 60 % 60);
                return s = Math.floor(s % 60), t.StringUtils.format(i, r < 10 ? "0" + r : r, a < 10 ? "0" + a : a, s < 10 ? "0" + s : s)
            }
            static format2Time(e) {
                let i = "{0}:{1}",
                    s = Math.max(0, e),
                    r = Math.floor(s / 24 / 3600);
                if (r > 0) return t.StringUtils.format("{0}天", r);
                let a = Math.floor(s / 3600 % 24),
                    n = Math.floor(s / 60 % 60),
                    l = n < 10 ? "0" + n : n,
                    o = a < 10 ? "0" + a : a,
                    h = (s = Math.floor(s % 60)) < 10 ? "0" + s : s;
                return a > 0 ? t.StringUtils.format(i, o, l) : (i = i.replace(":", "’"), t.StringUtils.format(i, l, h))
            }
            static format2Time2(e) {
                let i = "{0}:{1}",
                    s = Math.max(0, e),
                    r = Math.floor(s / 24 / 3600);
                if (r > 0) return t.StringUtils.format("{0}天", r);
                let a = Math.floor(s / 3600 % 24),
                    n = Math.floor(s / 60 % 60),
                    l = n < 10 ? "0" + n : n,
                    o = a < 10 ? "0" + a : a,
                    h = (s = Math.floor(s % 60)) < 10 ? "0" + s : s;
                return a > 0 ? t.StringUtils.format(i, o, l) : (i = i.replace(":", "’"), t.StringUtils.format(i, l, h))
            }
        }
        e.serverTimeDiff = 0, e.serverTime = 0, t.DateUtils = e
    }(airkit || (airkit = {})),
    function (t) {
        class e {
            static getKeys(t) {
                let e = [];
                for (let i in t) e.push(i);
                return e
            }
            static getValues(t) {
                let e = [];
                for (let i in t) e.push(t[i]);
                return e
            }
            static clearDic(t) {
                let i;
                for (let s in t)(i = t[s]) instanceof Object && e.clearDic(i), delete t[s]
            }
            static foreach(t, e) {
                for (let i in t)
                    if (!e.call(null, i, t[i])) break
            }
            static isEmpty(t) {
                if (null == t) return !0;
                for (let e in t) return !1;
                return !0
            }
            static getLength(t) {
                if (null == t) return 0;
                let e = 0;
                for (let i in t) ++e;
                return e
            }
            static assign(t, e) {
                Object.assign(t, e)
            }
        }
        t.DicUtils = e
    }(airkit || (airkit = {})),
    function (t) {
        t.DisplayUtils = class {
            static removeAllChild(t) {
                if (t && !(t.numChildren <= 0))
                    for (; t.numChildren > 0;) {
                        let e = t.removeChildAt(0);
                        if (e) {
                            let t = e.constructor;
                            if ("Animation" == t.name) {
                                let t = e;
                                t.clear(), t.destroy(!0), t = null
                            } else e.removeFromParent(), e.dispose();
                            t = null
                        }
                        e = null
                    }
            }
            static colorBG(t, e, i) {
                let s = new fgui.GGraph;
                return s.drawRect(1, t, t), s.setSize(e, i), s.alpha = .7, s
            }
            static popupDown(e, i, s) {
                e.scale(.8, .8);
                let r = displayWidth() >> 1,
                    a = displayHeight() >> 1;
                null != s && s ? (r = e.x, a = e.y) : (e.anchorX = .5, e.anchorY = .5), e.pos(r, 0), Laya.Tween.clearTween(e), Laya.Tween.to(e, {
                    scaleX: 1,
                    scaleY: 1,
                    x: r,
                    y: a
                }, 500, Laya.Ease.backOut, i), e.parent && e.parent.bg && (e.parent.bg.alpha = 0, t.TweenUtils.get(e.parent.bg).to({
                    alpha: 1
                }, 500, fgui.EaseType.QuadOut))
            }
            static popup(e, i, s) {
                e.setScale(.85, .85);
                let r = displayWidth() >> 1,
                    a = displayHeight() >> 1;
                if (null != s && s ? (r = e.x, a = e.y) : e.setPivot(.5, .5, !0), e.setXY(r, a), t.TweenUtils.get(e).to({
                        scaleX: 1,
                        scaleY: 1
                    }, .25, fgui.EaseType.QuadOut, i), e.parent && e.parent.getChild("bg")) {
                    let i = e.parent.getChild("bg");
                    i.alpha = 0, t.TweenUtils.get(i).to({
                        alpha: 1
                    }, .25, fgui.EaseType.QuadOut)
                }
            }
            static hide(e, i) {
                let s = e.panel(),
                    r = e.bg();
                null == s ? i && i.run() : (t.TweenUtils.get(s).to({
                    scaleX: .5,
                    scaleY: .5
                }, .2, fgui.EaseType.BackIn, i), r && t.TweenUtils.get(r).to({
                    alpha: 0
                }, .2, fgui.EaseType.QuadOut))
            }
            static createAsyncAnimation(t, e) {
                return new Promise((i, s) => {
                    let r = new Laya.Animation;
                    r.loadAnimation(t, Laya.Handler.create(null, t => {
                        i(r)
                    }), e)
                })
            }
            static createSkeletonAni(t, e) {
                return new Promise((i, s) => {
                    let r = new Laya.Templet;
                    r.on(Laya.Event.COMPLETE, null, t => {
                        var s = t.buildArmature(e);
                        t.offAll(), i([t, s])
                    }, [r]), r.on(Laya.Event.ERROR, null, t => {
                        s(t)
                    }), r.loadAni(t)
                })
            }
        }
    }(airkit || (airkit = {})),
    function (t) {
        let e;
        ! function (t) {
            t[t.Line = 3] = "Line", t[t.Curve = 2] = "Curve"
        }(e = t.OrbitType || (t.OrbitType = {}));
        class i {
            static sign(t) {
                return 0 === (t = +t) || isNaN(t) ? t : t > 0 ? 1 : -1
            }
            static clamp(t, e, i) {
                if (e > i) {
                    let t = e;
                    e = i, i = t
                }
                return t < e ? e : t > i ? i : t
            }
            static clamp01(t) {
                return t < 0 ? 0 : t > 1 ? 1 : t
            }
            static lerp(t, e, s) {
                return t + (e - t) * i.clamp01(s)
            }
            static lerpAngle(t, e, s) {
                let r = i.repeat(e - t, 360);
                return r > 180 && (r -= 360), t + r * i.clamp01(s)
            }
            static repeat(t, e) {
                return t - Math.floor(t / e) * e
            }
            static randRange(t, e) {
                return Math.random() * (e - t) + t
            }
            static randRange_Int(t, e) {
                let i = Math.random() * (e - t + 1) + t;
                return Math.floor(i)
            }
            static randRange_Array(t) {
                if (0 == t.length) return null;
                return t[i.randRange_Int(0, t.length - 1)]
            }
            static clampDegrees(t) {
                for (; t < 0;) t += 360;
                for (; t >= 360;) t -= 360;
                return t
            }
            static clampRadians(t) {
                for (; t < 0;) t += 2 * Math.PI;
                for (; t >= 2 * Math.PI;) t -= 2 * Math.PI;
                return t
            }
            static getDistance(t, e, i, s) {
                return Math.sqrt(Math.pow(s - e, 2) + Math.pow(i - t, 2))
            }
            static getSquareDistance(t, e, i, s) {
                return Math.pow(s - e, 2) + Math.pow(i - t, 2)
            }
            static getLineRadians(t, e, i, s) {
                return Math.atan2(s - e, i - t)
            }
            static getLineDegree(t, e, s, r) {
                let a = i.toDegree(i.getLineRadians(t, e, s, r));
                return i.clampDegrees(a)
            }
            static getPointRadians(t, e) {
                return Math.atan2(e, t)
            }
            static getPointDegree(t, e) {
                let s = i.toDegree(i.getPointRadians(t, e));
                return i.clampDegrees(s)
            }
            static toDegree(t) {
                return t * (180 / Math.PI)
            }
            static toRadian(t) {
                return t * (Math.PI / 180)
            }
            static moveTowards(t, e, s) {
                return Math.abs(e - t) <= s ? e : t + i.sign(e - t) * s
            }
            static radians4point(t, e, i, s) {
                return Math.atan2(e - s, i - t)
            }
            static pointAtCircle(t, e, i, s) {
                return new cc.Vec2(t + Math.cos(i) * s, e - Math.sin(i) * s)
            }
            static getPos(t, i, s) {
                if (0 == t.length) return null;
                if (1 == t.length) return t[0];
                i = Math.min(i, 1);
                let r = new cc.Vec2,
                    a = t.length;
                if (s == e.Line) {
                    let e = 1 / (a - 1),
                        s = Math.floor(i / e);
                    if (s + 1 < a) {
                        let a = t[s],
                            n = t[s + 1],
                            l = (i - s * e) / e;
                        r.x = a.x + (n.x - a.x) * l, r.y = a.y + (n.y - a.y) * l
                    } else r.x = t[t.length - 1].x, r.y = t[t.length - 1].y
                } else s == e.Curve && (r = this.getBezierat(t, i));
                return r
            }
            static getRotation(t, e, i, s) {
                let r = i - t,
                    a = s - e,
                    n = 180 * Math.atan(a / r) / Math.PI;
                return n += r >= 0 ? 90 : 270
            }
            static getBezierat(t, e) {
                let i = new cc.Vec2;
                return 3 == t.length ? (i.x = Math.pow(1 - e, 2) * t[0].x + 2 * e * (1 - e) * t[1].x + Math.pow(e, 2) * t[2].x, i.y = Math.pow(1 - e, 2) * t[0].y + 2 * e * (1 - e) * t[1].y + Math.pow(e, 2) * t[2].y) : 4 == t.length && (i.x = Math.pow(1 - e, 3) * t[0].x + 3 * e * Math.pow(1 - e, 2) * t[1].x + 3 * Math.pow(e, 2) * (1 - e) * t[2].x + Math.pow(e, 3) * t[3].x, i.y = Math.pow(1 - e, 3) * t[0].y + 3 * e * Math.pow(1 - e, 2) * t[1].y + 3 * Math.pow(e, 2) * (1 - e) * t[2].y + Math.pow(e, 3) * t[3].y), i
            }
            static getDirection(t) {
                let e = new cc.Vec2;
                if (0 == t || 180 == t) e.x = 0, e.y = 0 == t ? -1 : 1;
                else if (90 == t || 270 == t) e.y = 0, e.x = 90 == t ? 1 : -1;
                else {
                    let i = Math.floor(t / 90),
                        s = (90 - t) * Math.PI / 180;
                    e.x = 0 == i || 1 == i ? 1 : -1, e.y = 1 == i || 2 == i ? Math.abs(Math.tan(s)) : -Math.abs(Math.tan(s)), e = this.normalize(e)
                }
                return e
            }
            static normalize(t) {
                let e = t.y / t.x,
                    i = Math.sqrt(1 / (e * e + 1)),
                    s = Math.abs(e * i);
                return t.x = t.x > 0 ? i : -i, t.y = t.y > 0 ? s : -s, t
            }
            static distance(t, e, i, s) {
                return Math.sqrt((i - t) * (i - t) + (s - e) * (s - e))
            }
            static getVerticalVector(t, e, i) {
                let s = new cc.Vec2;
                s.x = e.x - t.x, s.y = e.y - t.y, s.normalize();
                let r = new cc.Vec2;
                r.x = 1, r.y = -s.x / s.y;
                let a = new cc.Vec2;
                return a.x = (t.x + e.x) / 2 + r.x * i, a.y = (t.y + e.y) / 2 + r.y * i, a
            }
            static getCtrlPoint(t, e, i = 100, s = 50, r = 50) {
                let a = this.getVerticalVector(t, e, i);
                return a.x += s, a.y += r, a
            }
            static getDefaultPoints(t, e, i = 150, s = 150, r = 150) {
                return t.x > displayWidth() / 2 && (i = -i), t.y > e.y && (s = -s), [t, this.getCtrlPoint(t, e, r, i, s), e]
            }
        }
        i.BYTE_TO_M = 1 / 1048576, i.BYTE_TO_K = 1 / 1024, i.Deg2Rad = .01745329, i.Rad2Deg = 57.29578, i.Cycle8Points = [
            [-200, 0],
            [-127, -74],
            [0, -100],
            [127, -74],
            [200, 0],
            [127, 74],
            [0, 100],
            [-127, 74]
        ], i.Cycle9Points = [
            [0, 0],
            [-200, 0],
            [-127, -74],
            [0, -100],
            [127, -74],
            [200, 0],
            [127, 74],
            [0, 100],
            [-127, 74]
        ], t.MathUtils = i
    }(airkit || (airkit = {})),
    function (t) {
        t.NumberUtils = class {
            static toFixed(e, i) {
                return t.StringUtils.toNumber(e.toFixed(i))
            }
            static toInt(t) {
                return Math.floor(t)
            }
            static isInt(t) {
                return Math.ceil(t) == t
            }
            static reserveNumber(e, i) {
                let s = String(e),
                    r = s.length,
                    a = s.indexOf(".");
                if (a < 0) return e;
                let n = s.slice(0, a + 1),
                    l = r - a;
                l > i && (l = i);
                let o = s.slice(a + 1, a + 1 + l);
                return t.StringUtils.toNumber(n + o)
            }
            static reserveNumberWithZero(t, e) {
                let i = String(t),
                    s = i.length,
                    r = i.indexOf(".");
                if (r < 0) {
                    i += ".";
                    for (let t = 0; t < e; ++t) i += "0";
                    return i
                }
                let a = i.slice(0, r + 1),
                    n = s - r - 1;
                if (n > e) return n = e, a + i.slice(r + 1, r + 1 + n);
                if (n < e) {
                    let t = e - n;
                    for (let e = 0; e < t; ++e) i += "0";
                    return i
                }
                return i
            }
        }
    }(airkit || (airkit = {})),
    function (t) {
        class e {
            static get empty() {
                return ""
            }
            static isNullOrEmpty(t) {
                return !(null != t && t.length > 0)
            }
            static toInt(t) {
                return t && 0 != t.length ? parseInt(t) : 0
            }
            static toNumber(t) {
                return t && 0 != t.length ? parseFloat(t) : 0
            }
            static stringCut(t, e, i = "...") {
                var s = t;
                return t.length > e && (s = t.substr(0, e) + i), s
            }
            static getNumBytes(t) {
                let e = 0,
                    i = t.length,
                    s = -1;
                for (var r = 0; r < i; r++) e += (s = t.charCodeAt(r)) >= 0 && s <= 128 ? 1 : 2;
                return e
            }
            static addZero(t, e, i = 0) {
                let s = "",
                    r = t.length,
                    a = "",
                    n = "";
                if (0 == i ? n = "0" : a = "0", r < e) {
                    let i = 0;
                    for (; i < e - r;) s = a + s + n, ++i;
                    return s + t
                }
                return t
            }
            static isString(t) {
                return "[object String]" === Object.prototype.toString.call(t)
            }
            static trim(t) {
                return null == t ? "" : t.replace(/^\s+|\s+$""^\s+|\s+$/g, "")
            }
            static trimLeft(t) {
                return null == t ? "" : t.replace(/^\s+""^\s+/, "")
            }
            static trimRight(t) {
                return null == t ? "" : t.replace(/\s+$""\s+$/, "")
            }
            static minuteFormat(t) {
                let e = Math.floor(t / 60),
                    i = Math.floor(t % 60);
                return (e < 10 ? "0" + e.toString() : e.toString()) + ":" + (i < 10 ? "0" + i.toString() : i.toString())
            }
            static hourFormat(t) {
                let i = Math.floor(t / 3600);
                return (i < 10 ? "0" + i.toString() : i.toString()) + ":" + e.minuteFormat(t % 3600)
            }
            static format(t, ...e) {
                for (let i = 0; i < e.length; i++) t = t.replace(new RegExp("\\{" + i + "\\}", "gm"), e[i]);
                return t
            }
            static formatWithDic(t, e) {
                for (let i in e) t = t.replace(new RegExp("\\{" + i + "\\}", "gm"), e[i]);
                return t
            }
            static beginsWith(t, e) {
                return e == t.substring(0, e.length)
            }
            static endsWith(t, e) {
                return e == t.substring(t.length - e.length)
            }
            static getGUIDString() {
                let t = Date.now();
                return window.performance && "function" == typeof window.performance.now && (t += performance.now()), "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, e => {
                    let i = (t + 16 * Math.random()) % 16 | 0;
                    return t = Math.floor(t / 16), ("x" == e ? i : 3 & i | 8).toString(16)
                })
            }
        }
        t.StringUtils = e
    }(airkit || (airkit = {})),
    function (t) {
        t.TouchUtils = class {
            static touchBreak(t) {
                t.on(Laya.Event.CLICK, t, t => {
                    t.stopPropagation()
                })
            }
            static mouseBreak(t) {
                t.on(Laya.Event.MOUSE_DOWN, t, t => {
                    t.stopPropagation()
                })
            }
        }
    }(airkit || (airkit = {})),
    function (t) {
        class e {
            constructor(t) {
                this._target = t, this.clear()
            }
            static get(t) {
                return new e(t)
            }
            get target() {
                return this._target
            }
            setOnUpdate(t) {
                this._updateFunc = t
            }
            onUpdate(t) {
                this._updateFunc && this._updateFunc(t)
            }
            to(t, e, i = fgui.EaseType.QuadOut, s = null, r = 0) {
                return this._steps.push({
                    props: t,
                    duration: e,
                    ease: i,
                    complete: s,
                    delay: r
                }), this.trigger(), this
            }
            delay(t) {
                return this._steps.push({
                    delay: t
                }), this
            }
            trigger() {
                if (!this._isPlaying && this._steps && this._steps.length) {
                    var e = this._steps.shift();
                    if (e.hasOwnProperty("props")) {
                        if (this._isPlaying = !0, null != e.props.x || null != e.props.y) {
                            let t = null != e.props.x ? e.props.x : this._target.x,
                                i = null != e.props.y ? e.props.y : this._target.y;
                            fgui.GTween.to2(this._target.x, this._target.y, t, i, e.duration).setTarget(this._target, this._target.setXY).setEase(e.ease)
                        }
                        if (null != e.props.scaleX || null != e.props.scaleY) {
                            let t = null != e.props.scaleX ? e.props.scaleX : this._target.scaleX,
                                i = null != e.props.scaleY ? e.props.scaleY : this._target.scaleY;
                            fgui.GTween.to2(this._target.scaleX, this._target.scaleY, t, i, e.duration).setTarget(this._target, this._target.setScale).setEase(e.ease)
                        }
                        if (null != e.props.rotation) {
                            let t = null != e.props.rotation ? e.props.rotation : this._target.rotation;
                            fgui.GTween.to(this._target.rotation, t, e.duration).setTarget(this._target, "rotation").setEase(e.ease)
                        }
                        if (null != e.props.color) {
                            null != e.props.color && e.props.color;
                            var i = new Laya.ColorFilter([1, 0, 0, .3, .3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0]);
                            this._target.filters = [i]
                        }
                        null != e.props.alpha && (e.props.pts ? fgui.GTween.to(this._target.alpha, e.props.alpha, e.duration).setTarget(this._target, "alpha").setEase(e.ease).onUpdate(i => {
                            let s = t.MathUtils.getPos(e.props.pts, i.normalizedTime, t.OrbitType.Curve);
                            this._target.setXY(s.x, s.y), this.onUpdate(i)
                        }, null) : fgui.GTween.to(this._target.alpha, e.props.alpha, e.duration).setTarget(this._target, "alpha").setEase(e.ease).onUpdate(t => {
                            this.onUpdate(t)
                        }, null)), Laya.timer.once(1e3 * (e.duration + e.delay), this, this.onStepComplete, [e.complete])
                    } else e.hasOwnProperty("delay") && (this._isPlaying = !0, Laya.timer.once(1e3 * e.delay, this, this.onStepComplete, [e.complete]))
                }
            }
            onStepComplete(t) {
                t && t.runWith(), this._isPlaying = !1, this.trigger()
            }
            clear() {
                this._steps = [], this._isPlaying = !1, fgui.GTween.kill(this._target)
            }
            static scale(t) {
                this.get(t).to({
                    scaleX: .8,
                    scaleY: .8
                }, .05, fgui.EaseType.QuadIn).to({
                    scaleX: 1,
                    scaleY: 1
                }, .05, fgui.EaseType.QuadIn)
            }
            static appear(t) {
                t.setScale(0, 0), this.get(t).to({
                    scaleX: 1.2,
                    scaleY: 1.2
                }, .4, fgui.EaseType.QuadOut).to({
                    scaleX: 1,
                    scaleY: 1
                }, .2, fgui.EaseType.QuadOut)
            }
            static shake(t) {
                Laya.Tween.to(t, {
                    y: t.y + 100
                }, 100, null, Laya.Handler.create(this, function () {
                    Laya.Tween.to(t, {
                        y: t.y - 100
                    }, 1e3, Laya.Ease.elasticOut)
                }))
            }
            static stageShake(t, e = 2, i = 12, s = 32, r, a) {
                if (!t.isShake) {
                    t.isShake = !0;
                    var n = 0,
                        l = [0, 0],
                        o = new cc.Vec2(t.x, t.y);
                    Laya.stage.timerLoop(s, this, function s(h = null, c = 1, u = 0) {
                        var g = n++ % 4;
                        l[n % 2] = g < 2 ? 0 : i;
                        t.x = l[0] + o.x;
                        t.y = l[1] + o.y;
                        n > 4 * e + 1 && (Laya.stage.clearTimer(this, s), n = 0, t.isShake = !1, null != a && a.call(r))
                    })
                }
            }
        }
        e.EaseBezier = 9999, t.TweenUtils = e
    }(airkit || (airkit = {})),
    function (t) {
        t.UrlUtils = class {
            static getFileExte(e) {
                if (t.StringUtils.isNullOrEmpty(e)) return t.StringUtils.empty;
                let i = e.lastIndexOf(".");
                return i >= 0 ? e.substr(i + 1) : t.StringUtils.empty
            }
            static getPathWithNoExtend(e) {
                if (t.StringUtils.isNullOrEmpty(e)) return t.StringUtils.empty;
                let i = e.lastIndexOf(".");
                return i >= 0 ? e.substr(0, i) : t.StringUtils.empty
            }
        }
    }(airkit || (airkit = {})),
    function (t) {
        t.Utils = class {
            static openURL(t) {
                Laya.Browser.window.location.href = t
            }
            static getLocationParams() {
                let e = window.location.href,
                    i = new t.SDictionary,
                    s = e.indexOf("?");
                if (s >= 0) {
                    let t, r, a = (e = e.substr(s + 1)).split("&");
                    for (let e in a) {
                        let n = a[e];
                        s = n.indexOf("="), t = n.substr(0, s), r = n.substr(s + 1), i.add(t, r)
                    }
                }
                return i
            }
            static gray(t, e) {
                if (e) {
                    var i = new Laya.ColorFilter;
                    t.filters = [i.gray()]
                } else t.filters = []
            }
            static obj2query(t) {
                if (!t) return "";
                var e = [];
                for (var i in t) e.push(i + "=" + t[i]);
                return e.join("&")
            }
            static injectProp(t, e = null, i = null, s = !0, r = !0, a = "") {
                if (!e) return !1;
                for (let a in e) {
                    let n = e[a];
                    s && "function" == typeof n || r && null == n || (i ? i(t, a, n) : t[a] = n)
                }
                return !0
            }
        };

        function e(t, e) {
            if (!t) throw e || "assert"
        }

        function i(t) {
            return null == t || (null === t || void 0 === t)
        }
        t.FlagUtils = class {
            static hasFlag(e, i) {
                return 0 != ((e = t.NumberUtils.toInt(e)) & (i = t.NumberUtils.toInt(i)))
            }
            static insertFlag(e, i) {
                return e = t.NumberUtils.toInt(e), e |= i = t.NumberUtils.toInt(i)
            }
            static removeFlag(e, i) {
                return e = t.NumberUtils.toInt(e), e ^= i = t.NumberUtils.toInt(i)
            }
        }, t.assert = e, t.assertNullOrNil = function (t, i) {
            null != t && null != t || e(!1, i)
        }, t.checkNullOrNil = i, t.checkEmptyDic = function (t) {
            return !!i(t) || "{}" == JSON.stringify(t)
        }
    }(airkit || (airkit = {})),
    function (t) {
        class e {
            static unzip(i) {
                return new Promise((s, r) => {
                    let a = {};
                    e.parseZip(i).then(i => {
                        let n = i.jszip,
                            l = i.filelist;
                        if (n && l) {
                            let o = 0;
                            for (let h = 0; h < l.length; h++) e.parseZipFile(n, l[h]).then(t => {
                                o++, a[l[h]] = t, o == l.length && (i = null, n = null, l = null, s(a))
                            }).catch(e => {
                                t.Log.error(e), r(e)
                            })
                        }
                    }).catch(e => {
                        t.Log.error(e), r(e)
                    })
                })
            }
            static parseZip(e) {
                return new Promise((i, s) => {
                    new t.SDictionary;
                    let r = new Array;
                    Laya.Browser.window.JSZip.loadAsync(e).then(t => {
                        for (var e in t.files) r.push(e);
                        i({
                            jszip: t,
                            filelist: r
                        })
                    }).catch(e => {
                        t.Log.error(e)
                    })
                })
            }
            static parseZipFile(e, i) {
                return new Promise((s, r) => {
                    e.file(i).async("text").then(t => {
                        s(t)
                    }).catch(e => {
                        r(e), t.Log.error(e)
                    })
                })
            }
        }
        t.ZipUtils = e
    }(airkit || (airkit = {}));